//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SPARQLParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BigO.SPARQLParser.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SPARQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACES=1, COMMENT=2, TRUE=3, FALSE=4, DISTINCT=5, NOT=6, IN=7, STR=8, 
		LANG=9, LANGMATCHES=10, DATATYPE=11, BOUND=12, IRI=13, URI=14, BNODE=15, 
		RAND=16, ABS=17, CEIL=18, FLOOR=19, ROUND=20, CONCAT=21, STRLEN=22, UCASE=23, 
		LCASE=24, ENCODE_FOR_URI=25, CONTAINS=26, STRSTARTS=27, STRENDS=28, STRBEFORE=29, 
		STRAFTER=30, YEAR=31, MONTH=32, DAY=33, HOURS=34, MINUTES=35, SECONDS=36, 
		TIMEZONE=37, TZ=38, NOW=39, UUID=40, STRUUID=41, MD5=42, SHA1=43, SHA256=44, 
		SHA384=45, SHA512=46, COALESCE=47, IF=48, STRLANG=49, STRDT=50, SameTerm=51, 
		IsIRI=52, IsURI=53, IsBLANK=54, IsLITERAL=55, IsNUMERIC=56, COUNT=57, 
		SUM=58, MIN=59, MAX=60, AVG=61, SAMPLE=62, GROUP_CONCAT=63, SEPARATOR=64, 
		REGEX=65, SUBSTR=66, REPLACE=67, EXISTS=68, SELECT=69, REDUCED=70, AS=71, 
		WHERE=72, OPTIONAL=73, GRAPH=74, SERVICE=75, SILENT=76, BIND=77, VALUES=78, 
		UNDEF=79, A_=80, UNION=81, MINUS=82, FILTER=83, GROUP=84, BY=85, HAVING=86, 
		ASC=87, DESC=88, LIMIT=89, OFFSET=90, ORDER=91, DEFAULT=92, NAMED=93, 
		ALL=94, USING=95, INSERT=96, DELETE=97, WITH=98, DATA=99, COPY=100, TO=101, 
		MOVE=102, CREATE=103, LOAD=104, INTO=105, CLEAR=106, DROP=107, BASE=108, 
		PREFIX=109, CONSTRUCT=110, FROM=111, DESCRIBE=112, ASK=113, CARET2=114, 
		CARET=115, OPAR=116, CPAR=117, COMMA=118, OR=119, AND=120, EQ=121, NEQ=122, 
		GT=123, LT=124, GTE=125, LTE=126, ADD=127, SUB=128, MUL=129, DIV=130, 
		EXCL=131, SCOL=132, OBRACE=133, CBRACE=134, DOT=135, OBRACK=136, CBRACK=137, 
		PIPE=138, QMARK=139, IRIREF=140, PNAME_NS=141, PNAME_LN=142, BLANK_NODE_LABEL=143, 
		VAR1=144, VAR2=145, LANGTAG=146, INTEGER=147, DECIMAL=148, DOUBLE=149, 
		INTEGER_POSITIVE=150, DECIMAL_POSITIVE=151, DOUBLE_POSITIVE=152, INTEGER_NEGATIVE=153, 
		DECIMAL_NEGATIVE=154, DOUBLE_NEGATIVE=155, STRING_LITERAL1=156, STRING_LITERAL2=157, 
		STRING_LITERAL_LONG1=158, STRING_LITERAL_LONG2=159, NIL=160, ANON=161, 
		UNEXPECTED_CHAR=162;
	public const int
		RULE_queryUnit = 0, RULE_updateUnit = 1, RULE_query = 2, RULE_prologue = 3, 
		RULE_baseDecl = 4, RULE_prefixDecl = 5, RULE_selectQuery = 6, RULE_subSelect = 7, 
		RULE_selectClause = 8, RULE_constructQuery = 9, RULE_describeQuery = 10, 
		RULE_askQuery = 11, RULE_datasetClause = 12, RULE_defaultGraphClause = 13, 
		RULE_namedGraphClause = 14, RULE_sourceSelector = 15, RULE_whereClause = 16, 
		RULE_solutionModifier = 17, RULE_groupClause = 18, RULE_groupCondition = 19, 
		RULE_havingClause = 20, RULE_havingCondition = 21, RULE_orderClause = 22, 
		RULE_orderCondition = 23, RULE_limitOffsetClauses = 24, RULE_limitClause = 25, 
		RULE_offsetClause = 26, RULE_valuesClause = 27, RULE_update = 28, RULE_update1 = 29, 
		RULE_load = 30, RULE_clear = 31, RULE_drop = 32, RULE_create = 33, RULE_add = 34, 
		RULE_move = 35, RULE_copy = 36, RULE_insertData = 37, RULE_deleteData = 38, 
		RULE_deleteWhere = 39, RULE_modify = 40, RULE_deleteClause = 41, RULE_insertClause = 42, 
		RULE_usingClause = 43, RULE_graphOrDefault = 44, RULE_graphRef = 45, RULE_graphRefAll = 46, 
		RULE_quadPattern = 47, RULE_quadData = 48, RULE_quads = 49, RULE_quadsNotTriples = 50, 
		RULE_triplesTemplate = 51, RULE_groupGraphPattern = 52, RULE_groupGraphPatternSub = 53, 
		RULE_triplesBlock = 54, RULE_graphPatternNotTriples = 55, RULE_optionalGraphPattern = 56, 
		RULE_graphGraphPattern = 57, RULE_serviceGraphPattern = 58, RULE_bind = 59, 
		RULE_inlineData = 60, RULE_dataBlock = 61, RULE_inlineDataOneVar = 62, 
		RULE_inlineDataFull = 63, RULE_dataBlockValue = 64, RULE_minusGraphPattern = 65, 
		RULE_groupOrUnionGraphPattern = 66, RULE_filter = 67, RULE_constraint = 68, 
		RULE_functionCall = 69, RULE_argList = 70, RULE_expressionList = 71, RULE_constructTemplate = 72, 
		RULE_constructTriples = 73, RULE_triplesSameSubject = 74, RULE_propertyList = 75, 
		RULE_propertyListNotEmpty = 76, RULE_verb = 77, RULE_objectList = 78, 
		RULE_object = 79, RULE_triplesSameSubjectPath = 80, RULE_propertyListPath = 81, 
		RULE_propertyListPathNotEmpty = 82, RULE_verbPath = 83, RULE_verbSimple = 84, 
		RULE_objectListPath = 85, RULE_objectPath = 86, RULE_path = 87, RULE_pathAlternative = 88, 
		RULE_pathSequence = 89, RULE_pathElt = 90, RULE_pathEltOrInverse = 91, 
		RULE_pathMod = 92, RULE_pathPrimary = 93, RULE_pathNegatedPropertySet = 94, 
		RULE_pathOneInPropertySet = 95, RULE_triplesNode = 96, RULE_blankNodePropertyList = 97, 
		RULE_triplesNodePath = 98, RULE_blankNodePropertyListPath = 99, RULE_collection = 100, 
		RULE_collectionPath = 101, RULE_graphNode = 102, RULE_graphNodePath = 103, 
		RULE_varOrTerm = 104, RULE_varOrIri = 105, RULE_var = 106, RULE_graphTerm = 107, 
		RULE_expression = 108, RULE_conditionalOrExpression = 109, RULE_conditionalAndExpression = 110, 
		RULE_valueLogical = 111, RULE_relationalExpression = 112, RULE_numericExpression = 113, 
		RULE_additiveExpression = 114, RULE_multiplicativeExpression = 115, RULE_unaryExpression = 116, 
		RULE_primaryExpression = 117, RULE_brackettedExpression = 118, RULE_builtInCall = 119, 
		RULE_regexExpression = 120, RULE_substringExpression = 121, RULE_strReplaceExpression = 122, 
		RULE_existsFunc = 123, RULE_notExistsFunc = 124, RULE_aggregate = 125, 
		RULE_iriOrFunction = 126, RULE_rdfLiteral = 127, RULE_numericLiteral = 128, 
		RULE_numericLiteralUnsigned = 129, RULE_numericLiteralPositive = 130, 
		RULE_numericLiteralNegative = 131, RULE_booleanLiteral = 132, RULE_string = 133, 
		RULE_iri = 134, RULE_prefixedName = 135, RULE_blankNode = 136;
	public static readonly string[] ruleNames = {
		"queryUnit", "updateUnit", "query", "prologue", "baseDecl", "prefixDecl", 
		"selectQuery", "subSelect", "selectClause", "constructQuery", "describeQuery", 
		"askQuery", "datasetClause", "defaultGraphClause", "namedGraphClause", 
		"sourceSelector", "whereClause", "solutionModifier", "groupClause", "groupCondition", 
		"havingClause", "havingCondition", "orderClause", "orderCondition", "limitOffsetClauses", 
		"limitClause", "offsetClause", "valuesClause", "update", "update1", "load", 
		"clear", "drop", "create", "add", "move", "copy", "insertData", "deleteData", 
		"deleteWhere", "modify", "deleteClause", "insertClause", "usingClause", 
		"graphOrDefault", "graphRef", "graphRefAll", "quadPattern", "quadData", 
		"quads", "quadsNotTriples", "triplesTemplate", "groupGraphPattern", "groupGraphPatternSub", 
		"triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
		"serviceGraphPattern", "bind", "inlineData", "dataBlock", "inlineDataOneVar", 
		"inlineDataFull", "dataBlockValue", "minusGraphPattern", "groupOrUnionGraphPattern", 
		"filter", "constraint", "functionCall", "argList", "expressionList", "constructTemplate", 
		"constructTriples", "triplesSameSubject", "propertyList", "propertyListNotEmpty", 
		"verb", "objectList", "object", "triplesSameSubjectPath", "propertyListPath", 
		"propertyListPathNotEmpty", "verbPath", "verbSimple", "objectListPath", 
		"objectPath", "path", "pathAlternative", "pathSequence", "pathElt", "pathEltOrInverse", 
		"pathMod", "pathPrimary", "pathNegatedPropertySet", "pathOneInPropertySet", 
		"triplesNode", "blankNodePropertyList", "triplesNodePath", "blankNodePropertyListPath", 
		"collection", "collectionPath", "graphNode", "graphNodePath", "varOrTerm", 
		"varOrIri", "var", "graphTerm", "expression", "conditionalOrExpression", 
		"conditionalAndExpression", "valueLogical", "relationalExpression", "numericExpression", 
		"additiveExpression", "multiplicativeExpression", "unaryExpression", "primaryExpression", 
		"brackettedExpression", "builtInCall", "regexExpression", "substringExpression", 
		"strReplaceExpression", "existsFunc", "notExistsFunc", "aggregate", "iriOrFunction", 
		"rdfLiteral", "numericLiteral", "numericLiteralUnsigned", "numericLiteralPositive", 
		"numericLiteralNegative", "booleanLiteral", "string", "iri", "prefixedName", 
		"blankNode"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'^^'", "'^'", "'('", "')'", "','", 
		"'||'", "'&&'", "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
		"'*'", "'/'", "'!'", "';'", "'{'", "'}'", "'.'", "'['", "']'", "'|'", 
		"'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACES", "COMMENT", "TRUE", "FALSE", "DISTINCT", "NOT", "IN", "STR", 
		"LANG", "LANGMATCHES", "DATATYPE", "BOUND", "IRI", "URI", "BNODE", "RAND", 
		"ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", 
		"ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", "STRAFTER", 
		"YEAR", "MONTH", "DAY", "HOURS", "MINUTES", "SECONDS", "TIMEZONE", "TZ", 
		"NOW", "UUID", "STRUUID", "MD5", "SHA1", "SHA256", "SHA384", "SHA512", 
		"COALESCE", "IF", "STRLANG", "STRDT", "SameTerm", "IsIRI", "IsURI", "IsBLANK", 
		"IsLITERAL", "IsNUMERIC", "COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", 
		"GROUP_CONCAT", "SEPARATOR", "REGEX", "SUBSTR", "REPLACE", "EXISTS", "SELECT", 
		"REDUCED", "AS", "WHERE", "OPTIONAL", "GRAPH", "SERVICE", "SILENT", "BIND", 
		"VALUES", "UNDEF", "A_", "UNION", "MINUS", "FILTER", "GROUP", "BY", "HAVING", 
		"ASC", "DESC", "LIMIT", "OFFSET", "ORDER", "DEFAULT", "NAMED", "ALL", 
		"USING", "INSERT", "DELETE", "WITH", "DATA", "COPY", "TO", "MOVE", "CREATE", 
		"LOAD", "INTO", "CLEAR", "DROP", "BASE", "PREFIX", "CONSTRUCT", "FROM", 
		"DESCRIBE", "ASK", "CARET2", "CARET", "OPAR", "CPAR", "COMMA", "OR", "AND", 
		"EQ", "NEQ", "GT", "LT", "GTE", "LTE", "ADD", "SUB", "MUL", "DIV", "EXCL", 
		"SCOL", "OBRACE", "CBRACE", "DOT", "OBRACK", "CBRACK", "PIPE", "QMARK", 
		"IRIREF", "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", "VAR1", "VAR2", 
		"LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", 
		"DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", 
		"STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", 
		"NIL", "ANON", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPARQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SPARQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	  public static IEnumerable<Type> ParserRules
	      => typeof(SPARQLParser).Assembly
	        .GetExportedTypes()
	        .Where(t => typeof(ParserRuleContext).IsAssignableFrom(t));

		public SPARQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPARQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPARQLParser.Eof, 0); }
		public QueryUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterQueryUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitQueryUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryUnitContext queryUnit() {
		QueryUnitContext _localctx = new QueryUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_queryUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			query();
			State = 275;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateContext update() {
			return GetRuleContext<UpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPARQLParser.Eof, 0); }
		public UpdateUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterUpdateUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitUpdateUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateUnitContext updateUnit() {
		UpdateUnitContext _localctx = new UpdateUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_updateUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			update();
			State = 278;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryContext selectQuery() {
			return GetRuleContext<SelectQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructQueryContext constructQuery() {
			return GetRuleContext<ConstructQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescribeQueryContext describeQuery() {
			return GetRuleContext<DescribeQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AskQueryContext askQuery() {
			return GetRuleContext<AskQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			prologue();
			State = 285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 281;
				selectQuery();
				}
				break;
			case CONSTRUCT:
				{
				State = 282;
				constructQuery();
				}
				break;
			case DESCRIBE:
				{
				State = 283;
				describeQuery();
				}
				break;
			case ASK:
				{
				State = 284;
				askQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 287;
			valuesClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseDeclContext[] baseDecl() {
			return GetRuleContexts<BaseDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseDeclContext baseDecl(int i) {
			return GetRuleContext<BaseDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixDeclContext[] prefixDecl() {
			return GetRuleContexts<PrefixDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixDeclContext prefixDecl(int i) {
			return GetRuleContext<PrefixDeclContext>(i);
		}
		public PrologueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPrologue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPrologue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrologue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrologueContext prologue() {
		PrologueContext _localctx = new PrologueContext(Context, State);
		EnterRule(_localctx, 6, RULE_prologue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BASE || _la==PREFIX) {
				{
				State = 291;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BASE:
					{
					State = 289;
					baseDecl();
					}
					break;
				case PREFIX:
					{
					State = 290;
					prefixDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(SPARQLParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRIREF() { return GetToken(SPARQLParser.IRIREF, 0); }
		public BaseDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBaseDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBaseDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseDeclContext baseDecl() {
		BaseDeclContext _localctx = new BaseDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_baseDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(BASE);
			State = 297;
			Match(IRIREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREFIX() { return GetToken(SPARQLParser.PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PNAME_NS() { return GetToken(SPARQLParser.PNAME_NS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRIREF() { return GetToken(SPARQLParser.IRIREF, 0); }
		public PrefixDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPrefixDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPrefixDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixDeclContext prefixDecl() {
		PrefixDeclContext _localctx = new PrefixDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_prefixDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(PREFIX);
			State = 300;
			Match(PNAME_NS);
			State = 301;
			Match(IRIREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext[] datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterSelectQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitSelectQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(Context, State);
		EnterRule(_localctx, 12, RULE_selectQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			selectClause();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM) {
				{
				{
				State = 304;
				datasetClause();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 310;
			whereClause();
			State = 311;
			solutionModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		public SubSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterSubSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitSubSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectContext subSelect() {
		SubSelectContext _localctx = new SubSelectContext(Context, State);
		EnterRule(_localctx, 14, RULE_subSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			selectClause();
			State = 314;
			whereClause();
			State = 315;
			solutionModifier();
			State = 316;
			valuesClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SPARQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SPARQLParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SPARQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCED() { return GetToken(SPARQLParser.REDUCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(SPARQLParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(SPARQLParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(SPARQLParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(SPARQLParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(SPARQLParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(SPARQLParser.CPAR, i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_selectClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(SELECT);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT || _la==REDUCED) {
				{
				State = 319;
				_la = TokenStream.LA(1);
				if ( !(_la==DISTINCT || _la==REDUCED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
			case VAR1:
			case VAR2:
				{
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 329;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case VAR1:
					case VAR2:
						{
						State = 322;
						var();
						}
						break;
					case OPAR:
						{
						{
						State = 323;
						Match(OPAR);
						State = 324;
						expression();
						State = 325;
						Match(AS);
						State = 326;
						var();
						State = 327;
						Match(CPAR);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 805306369L) != 0) );
				}
				break;
			case MUL:
				{
				State = 333;
				Match(MUL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCT() { return GetToken(SPARQLParser.CONSTRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructTemplateContext constructTemplate() {
			return GetRuleContext<ConstructTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SPARQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext[] datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesTemplateContext triplesTemplate() {
			return GetRuleContext<TriplesTemplateContext>(0);
		}
		public ConstructQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterConstructQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitConstructQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructQueryContext constructQuery() {
		ConstructQueryContext _localctx = new ConstructQueryContext(Context, State);
		EnterRule(_localctx, 18, RULE_constructQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(CONSTRUCT);
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBRACE:
				{
				State = 337;
				constructTemplate();
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FROM) {
					{
					{
					State = 338;
					datasetClause();
					}
					}
					State = 343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 344;
				whereClause();
				State = 345;
				solutionModifier();
				}
				break;
			case WHERE:
			case FROM:
				{
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FROM) {
					{
					{
					State = 347;
					datasetClause();
					}
					}
					State = 352;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 353;
				Match(WHERE);
				State = 354;
				Match(OBRACE);
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
					{
					State = 355;
					triplesTemplate();
					}
				}

				State = 358;
				Match(CBRACE);
				State = 359;
				solutionModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(SPARQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SPARQLParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext[] datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarOrIriContext[] varOrIri() {
			return GetRuleContexts<VarOrIriContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarOrIriContext varOrIri(int i) {
			return GetRuleContext<VarOrIriContext>(i);
		}
		public DescribeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDescribeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDescribeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeQueryContext describeQuery() {
		DescribeQueryContext _localctx = new DescribeQueryContext(Context, State);
		EnterRule(_localctx, 20, RULE_describeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(DESCRIBE);
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case VAR1:
			case VAR2:
				{
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 363;
					varOrIri();
					}
					}
					State = 366;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 55L) != 0) );
				}
				break;
			case MUL:
				{
				State = 368;
				Match(MUL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM) {
				{
				{
				State = 371;
				datasetClause();
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE || _la==OBRACE) {
				{
				State = 377;
				whereClause();
				}
			}

			State = 380;
			solutionModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASK() { return GetToken(SPARQLParser.ASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext[] datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public AskQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_askQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterAskQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitAskQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAskQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AskQueryContext askQuery() {
		AskQueryContext _localctx = new AskQueryContext(Context, State);
		EnterRule(_localctx, 22, RULE_askQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(ASK);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM) {
				{
				{
				State = 383;
				datasetClause();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			whereClause();
			State = 390;
			solutionModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SPARQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultGraphClauseContext defaultGraphClause() {
			return GetRuleContext<DefaultGraphClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedGraphClauseContext namedGraphClause() {
			return GetRuleContext<NamedGraphClauseContext>(0);
		}
		public DatasetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDatasetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDatasetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetClauseContext datasetClause() {
		DatasetClauseContext _localctx = new DatasetClauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_datasetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(FROM);
			State = 395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				{
				State = 393;
				defaultGraphClause();
				}
				break;
			case NAMED:
				{
				State = 394;
				namedGraphClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultGraphClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public DefaultGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultGraphClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDefaultGraphClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDefaultGraphClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultGraphClauseContext defaultGraphClause() {
		DefaultGraphClauseContext _localctx = new DefaultGraphClauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_defaultGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedGraphClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMED() { return GetToken(SPARQLParser.NAMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public NamedGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedGraphClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNamedGraphClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNamedGraphClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedGraphClauseContext namedGraphClause() {
		NamedGraphClauseContext _localctx = new NamedGraphClauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_namedGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(NAMED);
			State = 400;
			sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public SourceSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterSourceSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitSourceSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceSelectorContext sourceSelector() {
		SourceSelectorContext _localctx = new SourceSelectorContext(Context, State);
		EnterRule(_localctx, 30, RULE_sourceSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			iri();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SPARQLParser.WHERE, 0); }
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 404;
				Match(WHERE);
				}
			}

			State = 407;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SolutionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupClauseContext groupClause() {
			return GetRuleContext<GroupClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitOffsetClausesContext limitOffsetClauses() {
			return GetRuleContext<LimitOffsetClausesContext>(0);
		}
		public SolutionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solutionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterSolutionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitSolutionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolutionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SolutionModifierContext solutionModifier() {
		SolutionModifierContext _localctx = new SolutionModifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_solutionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 409;
				groupClause();
				}
			}

			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 412;
				havingClause();
				}
			}

			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 415;
				orderClause();
				}
			}

			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT || _la==OFFSET) {
				{
				State = 418;
				limitOffsetClauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SPARQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SPARQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupConditionContext[] groupCondition() {
			return GetRuleContexts<GroupConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupConditionContext groupCondition(int i) {
			return GetRuleContext<GroupConditionContext>(i);
		}
		public GroupClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupClauseContext groupClause() {
		GroupClauseContext _localctx = new GroupClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_groupClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(GROUP);
			State = 422;
			Match(BY);
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 423;
				groupCondition();
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 8935141660703064061L) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 922746881L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SPARQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public GroupConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGroupCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGroupCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupConditionContext groupCondition() {
		GroupConditionContext _localctx = new GroupConditionContext(Context, State);
		EnterRule(_localctx, 38, RULE_groupCondition);
		int _la;
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SameTerm:
			case IsIRI:
			case IsURI:
			case IsBLANK:
			case IsLITERAL:
			case IsNUMERIC:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				builtInCall();
				}
				break;
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				functionCall();
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				Match(OPAR);
				State = 431;
				expression();
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 432;
					Match(AS);
					State = 433;
					var();
					}
				}

				State = 436;
				Match(CPAR);
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 438;
				var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(SPARQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HavingConditionContext[] havingCondition() {
			return GetRuleContexts<HavingConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingConditionContext havingCondition(int i) {
			return GetRuleContext<HavingConditionContext>(i);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_havingClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(HAVING);
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 442;
				havingCondition();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 8935141660703064061L) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 117440513L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public HavingConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterHavingCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitHavingCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingConditionContext havingCondition() {
		HavingConditionContext _localctx = new HavingConditionContext(Context, State);
		EnterRule(_localctx, 42, RULE_havingCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SPARQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SPARQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderConditionContext[] orderCondition() {
			return GetRuleContexts<OrderConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderConditionContext orderCondition(int i) {
			return GetRuleContext<OrderConditionContext>(i);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_orderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(ORDER);
			State = 450;
			Match(BY);
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 451;
				orderCondition();
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 8935141660703064061L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 495395959547625475L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SPARQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SPARQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OrderConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterOrderCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitOrderCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderConditionContext orderCondition() {
		OrderConditionContext _localctx = new OrderConditionContext(Context, State);
		EnterRule(_localctx, 46, RULE_orderCondition);
		int _la;
		try {
			State = 460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
			case DESC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 457;
				brackettedExpression();
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SameTerm:
			case IsIRI:
			case IsURI:
			case IsBLANK:
			case IsLITERAL:
			case IsNUMERIC:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case OPAR:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				constraint();
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 459;
				var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOffsetClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OffsetClauseContext offsetClause() {
			return GetRuleContext<OffsetClauseContext>(0);
		}
		public LimitOffsetClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOffsetClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterLimitOffsetClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitLimitOffsetClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOffsetClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOffsetClausesContext limitOffsetClauses() {
		LimitOffsetClausesContext _localctx = new LimitOffsetClausesContext(Context, State);
		EnterRule(_localctx, 48, RULE_limitOffsetClauses);
		int _la;
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				limitClause();
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 463;
					offsetClause();
					}
				}

				}
				break;
			case OFFSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466;
				offsetClause();
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 467;
					limitClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SPARQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SPARQLParser.INTEGER, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 50, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(LIMIT);
			State = 473;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SPARQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SPARQLParser.INTEGER, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterOffsetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitOffsetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetClauseContext offsetClause() {
		OffsetClauseContext _localctx = new OffsetClauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_offsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(OFFSET);
			State = 476;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SPARQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataBlockContext dataBlock() {
			return GetRuleContext<DataBlockContext>(0);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterValuesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitValuesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesClauseContext valuesClause() {
		ValuesClauseContext _localctx = new ValuesClauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_valuesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VALUES) {
				{
				State = 478;
				Match(VALUES);
				State = 479;
				dataBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update1Context update1() {
			return GetRuleContext<Update1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL() { return GetToken(SPARQLParser.SCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateContext update() {
			return GetRuleContext<UpdateContext>(0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateContext update() {
		UpdateContext _localctx = new UpdateContext(Context, State);
		EnterRule(_localctx, 56, RULE_update);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			prologue();
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 2147487191L) != 0)) {
				{
				State = 483;
				update1();
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCOL) {
					{
					State = 484;
					Match(SCOL);
					State = 485;
					update();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoadContext load() {
			return GetRuleContext<LoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClearContext clear() {
			return GetRuleContext<ClearContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropContext drop() {
			return GetRuleContext<DropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyContext copy() {
			return GetRuleContext<CopyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertDataContext insertData() {
			return GetRuleContext<InsertDataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDataContext deleteData() {
			return GetRuleContext<DeleteDataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteWhereContext deleteWhere() {
			return GetRuleContext<DeleteWhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyContext modify() {
			return GetRuleContext<ModifyContext>(0);
		}
		public Update1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterUpdate1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitUpdate1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update1Context update1() {
		Update1Context _localctx = new Update1Context(Context, State);
		EnterRule(_localctx, 58, RULE_update1);
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490;
				load();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491;
				clear();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 492;
				drop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 493;
				add();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 494;
				move();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 495;
				copy();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 496;
				create();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 497;
				insertData();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 498;
				deleteData();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 499;
				deleteWhere();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 500;
				modify();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(SPARQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SPARQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphRefContext graphRef() {
			return GetRuleContext<GraphRefContext>(0);
		}
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(Context, State);
		EnterRule(_localctx, 60, RULE_load);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(LOAD);
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 504;
				Match(SILENT);
				}
			}

			State = 507;
			iri();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 508;
				Match(INTO);
				State = 509;
				graphRef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClearContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEAR() { return GetToken(SPARQLParser.CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphRefAllContext graphRefAll() {
			return GetRuleContext<GraphRefAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public ClearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clear; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterClear(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitClear(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClear(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClearContext clear() {
		ClearContext _localctx = new ClearContext(Context, State);
		EnterRule(_localctx, 62, RULE_clear);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(CLEAR);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 513;
				Match(SILENT);
				}
			}

			State = 516;
			graphRefAll();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SPARQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphRefAllContext graphRefAll() {
			return GetRuleContext<GraphRefAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public DropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDrop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDrop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropContext drop() {
		DropContext _localctx = new DropContext(Context, State);
		EnterRule(_localctx, 64, RULE_drop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(DROP);
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 519;
				Match(SILENT);
				}
			}

			State = 522;
			graphRefAll();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SPARQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphRefContext graphRef() {
			return GetRuleContext<GraphRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 66, RULE_create);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(CREATE);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 525;
				Match(SILENT);
				}
			}

			State = 528;
			graphRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SPARQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphOrDefaultContext[] graphOrDefault() {
			return GetRuleContexts<GraphOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphOrDefaultContext graphOrDefault(int i) {
			return GetRuleContext<GraphOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SPARQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 68, RULE_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(ADD);
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 531;
				Match(SILENT);
				}
			}

			State = 534;
			graphOrDefault();
			State = 535;
			Match(TO);
			State = 536;
			graphOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(SPARQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphOrDefaultContext[] graphOrDefault() {
			return GetRuleContexts<GraphOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphOrDefaultContext graphOrDefault(int i) {
			return GetRuleContext<GraphOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SPARQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 70, RULE_move);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(MOVE);
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 539;
				Match(SILENT);
				}
			}

			State = 542;
			graphOrDefault();
			State = 543;
			Match(TO);
			State = 544;
			graphOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(SPARQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphOrDefaultContext[] graphOrDefault() {
			return GetRuleContexts<GraphOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphOrDefaultContext graphOrDefault(int i) {
			return GetRuleContext<GraphOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SPARQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public CopyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyContext copy() {
		CopyContext _localctx = new CopyContext(Context, State);
		EnterRule(_localctx, 72, RULE_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(COPY);
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 547;
				Match(SILENT);
				}
			}

			State = 550;
			graphOrDefault();
			State = 551;
			Match(TO);
			State = 552;
			graphOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SPARQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SPARQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadDataContext quadData() {
			return GetRuleContext<QuadDataContext>(0);
		}
		public InsertDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterInsertData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitInsertData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertDataContext insertData() {
		InsertDataContext _localctx = new InsertDataContext(Context, State);
		EnterRule(_localctx, 74, RULE_insertData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(INSERT);
			State = 555;
			Match(DATA);
			State = 556;
			quadData();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SPARQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(SPARQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadDataContext quadData() {
			return GetRuleContext<QuadDataContext>(0);
		}
		public DeleteDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDataContext deleteData() {
		DeleteDataContext _localctx = new DeleteDataContext(Context, State);
		EnterRule(_localctx, 76, RULE_deleteData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(DELETE);
			State = 559;
			Match(DATA);
			State = 560;
			quadData();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteWhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SPARQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SPARQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadPatternContext quadPattern() {
			return GetRuleContext<QuadPatternContext>(0);
		}
		public DeleteWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteWhere; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteWhereContext deleteWhere() {
		DeleteWhereContext _localctx = new DeleteWhereContext(Context, State);
		EnterRule(_localctx, 78, RULE_deleteWhere);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(DELETE);
			State = 563;
			Match(WHERE);
			State = 564;
			quadPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SPARQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteClauseContext deleteClause() {
			return GetRuleContext<DeleteClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext insertClause() {
			return GetRuleContext<InsertClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SPARQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext[] usingClause() {
			return GetRuleContexts<UsingClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext usingClause(int i) {
			return GetRuleContext<UsingClauseContext>(i);
		}
		public ModifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyContext modify() {
		ModifyContext _localctx = new ModifyContext(Context, State);
		EnterRule(_localctx, 80, RULE_modify);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 566;
				Match(WITH);
				State = 567;
				iri();
				}
			}

			State = 575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				{
				State = 570;
				deleteClause();
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INSERT) {
					{
					State = 571;
					insertClause();
					}
				}

				}
				break;
			case INSERT:
				{
				State = 574;
				insertClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 577;
				usingClause();
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 583;
			Match(WHERE);
			State = 584;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SPARQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadPatternContext quadPattern() {
			return GetRuleContext<QuadPatternContext>(0);
		}
		public DeleteClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDeleteClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDeleteClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteClauseContext deleteClause() {
		DeleteClauseContext _localctx = new DeleteClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_deleteClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(DELETE);
			State = 587;
			quadPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SPARQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadPatternContext quadPattern() {
			return GetRuleContext<QuadPatternContext>(0);
		}
		public InsertClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertClauseContext insertClause() {
		InsertClauseContext _localctx = new InsertClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_insertClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(INSERT);
			State = 590;
			quadPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SPARQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMED() { return GetToken(SPARQLParser.NAMED, 0); }
		public UsingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterUsingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitUsingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingClauseContext usingClause() {
		UsingClauseContext _localctx = new UsingClauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_usingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(USING);
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				{
				State = 593;
				iri();
				}
				break;
			case NAMED:
				{
				State = 594;
				Match(NAMED);
				State = 595;
				iri();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SPARQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(SPARQLParser.GRAPH, 0); }
		public GraphOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphOrDefaultContext graphOrDefault() {
		GraphOrDefaultContext _localctx = new GraphOrDefaultContext(Context, State);
		EnterRule(_localctx, 88, RULE_graphOrDefault);
		int _la;
		try {
			State = 603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598;
				Match(DEFAULT);
				}
				break;
			case GRAPH:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GRAPH) {
					{
					State = 599;
					Match(GRAPH);
					}
				}

				State = 602;
				iri();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(SPARQLParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public GraphRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphRefContext graphRef() {
		GraphRefContext _localctx = new GraphRefContext(Context, State);
		EnterRule(_localctx, 90, RULE_graphRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(GRAPH);
			State = 606;
			iri();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphRefAllContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GraphRefContext graphRef() {
			return GetRuleContext<GraphRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SPARQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMED() { return GetToken(SPARQLParser.NAMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SPARQLParser.ALL, 0); }
		public GraphRefAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphRefAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphRefAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphRefAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphRefAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphRefAllContext graphRefAll() {
		GraphRefAllContext _localctx = new GraphRefAllContext(Context, State);
		EnterRule(_localctx, 92, RULE_graphRefAll);
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAPH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608;
				graphRef();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609;
				Match(DEFAULT);
				}
				break;
			case NAMED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 610;
				Match(NAMED);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 611;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadsContext quads() {
			return GetRuleContext<QuadsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		public QuadPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quadPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterQuadPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitQuadPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuadPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadPatternContext quadPattern() {
		QuadPatternContext _localctx = new QuadPatternContext(Context, State);
		EnterRule(_localctx, 94, RULE_quadPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(OBRACE);
			State = 615;
			quads();
			State = 616;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuadsContext quads() {
			return GetRuleContext<QuadsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		public QuadDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quadData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterQuadData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitQuadData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuadData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadDataContext quadData() {
		QuadDataContext _localctx = new QuadDataContext(Context, State);
		EnterRule(_localctx, 96, RULE_quadData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(OBRACE);
			State = 619;
			quads();
			State = 620;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriplesTemplateContext[] triplesTemplate() {
			return GetRuleContexts<TriplesTemplateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesTemplateContext triplesTemplate(int i) {
			return GetRuleContext<TriplesTemplateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuadsNotTriplesContext[] quadsNotTriples() {
			return GetRuleContexts<QuadsNotTriplesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuadsNotTriplesContext quadsNotTriples(int i) {
			return GetRuleContext<QuadsNotTriplesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SPARQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SPARQLParser.DOT, i);
		}
		public QuadsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quads; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterQuads(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitQuads(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuads(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadsContext quads() {
		QuadsContext _localctx = new QuadsContext(Context, State);
		EnterRule(_localctx, 98, RULE_quads);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
				{
				State = 622;
				triplesTemplate();
				}
			}

			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==GRAPH) {
				{
				{
				State = 625;
				quadsNotTriples();
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 626;
					Match(DOT);
					}
				}

				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
					{
					State = 629;
					triplesTemplate();
					}
				}

				}
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuadsNotTriplesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(SPARQLParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriplesTemplateContext triplesTemplate() {
			return GetRuleContext<TriplesTemplateContext>(0);
		}
		public QuadsNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quadsNotTriples; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterQuadsNotTriples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitQuadsNotTriples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuadsNotTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuadsNotTriplesContext quadsNotTriples() {
		QuadsNotTriplesContext _localctx = new QuadsNotTriplesContext(Context, State);
		EnterRule(_localctx, 100, RULE_quadsNotTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(GRAPH);
			State = 638;
			varOrIri();
			State = 639;
			Match(OBRACE);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
				{
				State = 640;
				triplesTemplate();
				}
			}

			State = 643;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SPARQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriplesTemplateContext triplesTemplate() {
			return GetRuleContext<TriplesTemplateContext>(0);
		}
		public TriplesTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterTriplesTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitTriplesTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesTemplateContext triplesTemplate() {
		TriplesTemplateContext _localctx = new TriplesTemplateContext(Context, State);
		EnterRule(_localctx, 102, RULE_triplesTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			triplesSameSubject();
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 646;
				Match(DOT);
				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
					{
					State = 647;
					triplesTemplate();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubSelectContext subSelect() {
			return GetRuleContext<SubSelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternSubContext groupGraphPatternSub() {
			return GetRuleContext<GroupGraphPatternSubContext>(0);
		}
		public GroupGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupGraphPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGroupGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGroupGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupGraphPatternContext groupGraphPattern() {
		GroupGraphPatternContext _localctx = new GroupGraphPatternContext(Context, State);
		EnterRule(_localctx, 104, RULE_groupGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(OBRACE);
			State = 655;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 653;
				subSelect();
				}
				break;
			case TRUE:
			case FALSE:
			case OPTIONAL:
			case GRAPH:
			case SERVICE:
			case BIND:
			case VALUES:
			case MINUS:
			case FILTER:
			case OPAR:
			case OBRACE:
			case CBRACE:
			case OBRACK:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				{
				State = 654;
				groupGraphPatternSub();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 657;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriplesBlockContext[] triplesBlock() {
			return GetRuleContexts<TriplesBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesBlockContext triplesBlock(int i) {
			return GetRuleContext<TriplesBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphPatternNotTriplesContext[] graphPatternNotTriples() {
			return GetRuleContexts<GraphPatternNotTriplesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphPatternNotTriplesContext graphPatternNotTriples(int i) {
			return GetRuleContext<GraphPatternNotTriplesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SPARQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SPARQLParser.DOT, i);
		}
		public GroupGraphPatternSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupGraphPatternSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGroupGraphPatternSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGroupGraphPatternSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupGraphPatternSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupGraphPatternSubContext groupGraphPatternSub() {
		GroupGraphPatternSubContext _localctx = new GroupGraphPatternSubContext(Context, State);
		EnterRule(_localctx, 106, RULE_groupGraphPatternSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
				{
				State = 659;
				triplesBlock();
				}
			}

			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1152921504606848567L) != 0)) {
				{
				{
				State = 662;
				graphPatternNotTriples();
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 663;
					Match(DOT);
					}
				}

				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
					{
					State = 666;
					triplesBlock();
					}
				}

				}
				}
				State = 673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriplesSameSubjectPathContext triplesSameSubjectPath() {
			return GetRuleContext<TriplesSameSubjectPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SPARQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriplesBlockContext triplesBlock() {
			return GetRuleContext<TriplesBlockContext>(0);
		}
		public TriplesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterTriplesBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitTriplesBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesBlockContext triplesBlock() {
		TriplesBlockContext _localctx = new TriplesBlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_triplesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			triplesSameSubjectPath();
			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 675;
				Match(DOT);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
					{
					State = 676;
					triplesBlock();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphPatternNotTriplesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
			return GetRuleContext<GroupOrUnionGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalGraphPatternContext optionalGraphPattern() {
			return GetRuleContext<OptionalGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinusGraphPatternContext minusGraphPattern() {
			return GetRuleContext<MinusGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphGraphPatternContext graphGraphPattern() {
			return GetRuleContext<GraphGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServiceGraphPatternContext serviceGraphPattern() {
			return GetRuleContext<ServiceGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindContext bind() {
			return GetRuleContext<BindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineDataContext inlineData() {
			return GetRuleContext<InlineDataContext>(0);
		}
		public GraphPatternNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphPatternNotTriples; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphPatternNotTriples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphPatternNotTriples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphPatternNotTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphPatternNotTriplesContext graphPatternNotTriples() {
		GraphPatternNotTriplesContext _localctx = new GraphPatternNotTriplesContext(Context, State);
		EnterRule(_localctx, 110, RULE_graphPatternNotTriples);
		try {
			State = 689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681;
				groupOrUnionGraphPattern();
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 682;
				optionalGraphPattern();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 683;
				minusGraphPattern();
				}
				break;
			case GRAPH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 684;
				graphGraphPattern();
				}
				break;
			case SERVICE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 685;
				serviceGraphPattern();
				}
				break;
			case FILTER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 686;
				filter();
				}
				break;
			case BIND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 687;
				bind();
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 8);
				{
				State = 688;
				inlineData();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalGraphPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(SPARQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalGraphPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterOptionalGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitOptionalGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalGraphPatternContext optionalGraphPattern() {
		OptionalGraphPatternContext _localctx = new OptionalGraphPatternContext(Context, State);
		EnterRule(_localctx, 112, RULE_optionalGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(OPTIONAL);
			State = 692;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphGraphPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAPH() { return GetToken(SPARQLParser.GRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public GraphGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphGraphPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphGraphPatternContext graphGraphPattern() {
		GraphGraphPatternContext _localctx = new GraphGraphPatternContext(Context, State);
		EnterRule(_localctx, 114, RULE_graphGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(GRAPH);
			State = 695;
			varOrIri();
			State = 696;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceGraphPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(SPARQLParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SILENT() { return GetToken(SPARQLParser.SILENT, 0); }
		public ServiceGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceGraphPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterServiceGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitServiceGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceGraphPatternContext serviceGraphPattern() {
		ServiceGraphPatternContext _localctx = new ServiceGraphPatternContext(Context, State);
		EnterRule(_localctx, 116, RULE_serviceGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(SERVICE);
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SILENT) {
				{
				State = 699;
				Match(SILENT);
				}
			}

			State = 702;
			varOrIri();
			State = 703;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(SPARQLParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SPARQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		public BindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindContext bind() {
		BindContext _localctx = new BindContext(Context, State);
		EnterRule(_localctx, 118, RULE_bind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(BIND);
			State = 706;
			Match(OPAR);
			State = 707;
			expression();
			State = 708;
			Match(AS);
			State = 709;
			var();
			State = 710;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SPARQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataBlockContext dataBlock() {
			return GetRuleContext<DataBlockContext>(0);
		}
		public InlineDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterInlineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitInlineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDataContext inlineData() {
		InlineDataContext _localctx = new InlineDataContext(Context, State);
		EnterRule(_localctx, 120, RULE_inlineData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(VALUES);
			State = 713;
			dataBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineDataOneVarContext inlineDataOneVar() {
			return GetRuleContext<InlineDataOneVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineDataFullContext inlineDataFull() {
			return GetRuleContext<InlineDataFullContext>(0);
		}
		public DataBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDataBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDataBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataBlockContext dataBlock() {
		DataBlockContext _localctx = new DataBlockContext(Context, State);
		EnterRule(_localctx, 122, RULE_dataBlock);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715;
				inlineDataOneVar();
				}
				break;
			case OPAR:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716;
				inlineDataFull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDataOneVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataBlockValueContext[] dataBlockValue() {
			return GetRuleContexts<DataBlockValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataBlockValueContext dataBlockValue(int i) {
			return GetRuleContext<DataBlockValueContext>(i);
		}
		public InlineDataOneVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineDataOneVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterInlineDataOneVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitInlineDataOneVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineDataOneVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDataOneVarContext inlineDataOneVar() {
		InlineDataOneVarContext _localctx = new InlineDataOneVarContext(Context, State);
		EnterRule(_localctx, 124, RULE_inlineDataOneVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			var();
			State = 720;
			Match(OBRACE);
			State = 724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TRUE || _la==FALSE || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & -2305843009213693951L) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & 8191L) != 0)) {
				{
				{
				State = 721;
				dataBlockValue();
				}
				}
				State = 726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 727;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDataFullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NIL() { return GetTokens(SPARQLParser.NIL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL(int i) {
			return GetToken(SPARQLParser.NIL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(SPARQLParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(SPARQLParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(SPARQLParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(SPARQLParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataBlockValueContext[] dataBlockValue() {
			return GetRuleContexts<DataBlockValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataBlockValueContext dataBlockValue(int i) {
			return GetRuleContext<DataBlockValueContext>(i);
		}
		public InlineDataFullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineDataFull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterInlineDataFull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitInlineDataFull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineDataFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDataFullContext inlineDataFull() {
		InlineDataFullContext _localctx = new InlineDataFullContext(Context, State);
		EnterRule(_localctx, 126, RULE_inlineDataFull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL:
				{
				State = 729;
				Match(NIL);
				}
				break;
			case OPAR:
				{
				State = 730;
				Match(OPAR);
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VAR1 || _la==VAR2) {
					{
					{
					State = 731;
					var();
					}
					}
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 737;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 740;
			Match(OBRACE);
			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPAR || _la==NIL) {
				{
				State = 750;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPAR:
					{
					State = 741;
					Match(OPAR);
					State = 745;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TRUE || _la==FALSE || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & -2305843009213693951L) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & 8191L) != 0)) {
						{
						{
						State = 742;
						dataBlockValue();
						}
						}
						State = 747;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 748;
					Match(CPAR);
					}
					break;
				case NIL:
					{
					State = 749;
					Match(NIL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 755;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataBlockValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RdfLiteralContext rdfLiteral() {
			return GetRuleContext<RdfLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEF() { return GetToken(SPARQLParser.UNDEF, 0); }
		public DataBlockValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataBlockValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterDataBlockValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitDataBlockValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataBlockValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataBlockValueContext dataBlockValue() {
		DataBlockValueContext _localctx = new DataBlockValueContext(Context, State);
		EnterRule(_localctx, 128, RULE_dataBlockValue);
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 757;
				iri();
				}
				break;
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758;
				rdfLiteral();
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 759;
				numericLiteral();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 760;
				booleanLiteral();
				}
				break;
			case UNDEF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 761;
				Match(UNDEF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinusGraphPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SPARQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public MinusGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minusGraphPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterMinusGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitMinusGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinusGraphPatternContext minusGraphPattern() {
		MinusGraphPatternContext _localctx = new MinusGraphPatternContext(Context, State);
		EnterRule(_localctx, 130, RULE_minusGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(MINUS);
			State = 765;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupOrUnionGraphPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext[] groupGraphPattern() {
			return GetRuleContexts<GroupGraphPatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern(int i) {
			return GetRuleContext<GroupGraphPatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(SPARQLParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(SPARQLParser.UNION, i);
		}
		public GroupOrUnionGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupOrUnionGraphPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGroupOrUnionGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGroupOrUnionGraphPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupOrUnionGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
		GroupOrUnionGraphPatternContext _localctx = new GroupOrUnionGraphPatternContext(Context, State);
		EnterRule(_localctx, 132, RULE_groupOrUnionGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			groupGraphPattern();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNION) {
				{
				{
				State = 768;
				Match(UNION);
				State = 769;
				groupGraphPattern();
				}
				}
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SPARQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 134, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(FILTER);
			State = 776;
			constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 136, RULE_constraint);
		try {
			State = 781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778;
				brackettedExpression();
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SameTerm:
			case IsIRI:
			case IsURI:
			case IsBLANK:
			case IsLITERAL:
			case IsNUMERIC:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				builtInCall();
				}
				break;
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 780;
				functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 138, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			iri();
			State = 784;
			argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(SPARQLParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SPARQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 140, RULE_argList);
		int _la;
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				Match(NIL);
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 787;
				Match(OPAR);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 788;
					Match(DISTINCT);
					}
				}

				State = 791;
				expression();
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 792;
					Match(COMMA);
					State = 793;
					expression();
					}
					}
					State = 798;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 799;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(SPARQLParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 142, RULE_expressionList);
		int _la;
		try {
			State = 815;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				Match(NIL);
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				Match(OPAR);
				State = 805;
				expression();
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 806;
					Match(COMMA);
					State = 807;
					expression();
					}
					}
					State = 812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 813;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SPARQLParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SPARQLParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public ConstructTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterConstructTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitConstructTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTemplateContext constructTemplate() {
		ConstructTemplateContext _localctx = new ConstructTemplateContext(Context, State);
		EnterRule(_localctx, 144, RULE_constructTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(OBRACE);
			State = 819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
				{
				State = 818;
				constructTriples();
				}
			}

			State = 821;
			Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTriplesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SPARQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public ConstructTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructTriples; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterConstructTriples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitConstructTriples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTriplesContext constructTriples() {
		ConstructTriplesContext _localctx = new ConstructTriplesContext(Context, State);
		EnterRule(_localctx, 146, RULE_constructTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			triplesSameSubject();
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 824;
				Match(DOT);
				State = 826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0)) {
					{
					State = 825;
					constructTriples();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public TriplesSameSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesSameSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectContext triplesSameSubject() {
		TriplesSameSubjectContext _localctx = new TriplesSameSubjectContext(Context, State);
		EnterRule(_localctx, 148, RULE_triplesSameSubject);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 830;
				varOrTerm();
				State = 831;
				propertyListNotEmpty();
				}
				break;
			case OPAR:
			case OBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833;
				triplesNode();
				State = 834;
				propertyList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListContext propertyList() {
		PropertyListContext _localctx = new PropertyListContext(Context, State);
		EnterRule(_localctx, 150, RULE_propertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 8070450532247928833L) != 0) || _la==VAR1 || _la==VAR2) {
				{
				State = 838;
				propertyListNotEmpty();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListNotEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VerbContext[] verb() {
			return GetRuleContexts<VerbContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbContext verb(int i) {
			return GetRuleContext<VerbContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectListContext[] objectList() {
			return GetRuleContexts<ObjectListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectListContext objectList(int i) {
			return GetRuleContext<ObjectListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(SPARQLParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(SPARQLParser.SCOL, i);
		}
		public PropertyListNotEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyListNotEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPropertyListNotEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPropertyListNotEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListNotEmptyContext propertyListNotEmpty() {
		PropertyListNotEmptyContext _localctx = new PropertyListNotEmptyContext(Context, State);
		EnterRule(_localctx, 152, RULE_propertyListNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			verb();
			State = 842;
			objectList();
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 843;
				Match(SCOL);
				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 8070450532247928833L) != 0) || _la==VAR1 || _la==VAR2) {
					{
					State = 844;
					verb();
					State = 845;
					objectList();
					}
				}

				}
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrIriContext varOrIri() {
			return GetRuleContext<VarOrIriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_() { return GetToken(SPARQLParser.A_, 0); }
		public VerbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterVerb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitVerb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbContext verb() {
		VerbContext _localctx = new VerbContext(Context, State);
		EnterRule(_localctx, 154, RULE_verb);
		try {
			State = 856;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				varOrIri();
				}
				break;
			case A_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855;
				Match(A_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListContext objectList() {
		ObjectListContext _localctx = new ObjectListContext(Context, State);
		EnterRule(_localctx, 156, RULE_objectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			@object();
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 859;
				Match(COMMA);
				State = 860;
				@object();
				}
				}
				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GraphNodeContext graphNode() {
			return GetRuleContext<GraphNodeContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 158, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			graphNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListPathNotEmptyContext propertyListPathNotEmpty() {
			return GetRuleContext<PropertyListPathNotEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesNodePathContext triplesNodePath() {
			return GetRuleContext<TriplesNodePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListPathContext propertyListPath() {
			return GetRuleContext<PropertyListPathContext>(0);
		}
		public TriplesSameSubjectPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesSameSubjectPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubjectPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubjectPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubjectPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectPathContext triplesSameSubjectPath() {
		TriplesSameSubjectPathContext _localctx = new TriplesSameSubjectPathContext(Context, State);
		EnterRule(_localctx, 160, RULE_triplesSameSubjectPath);
		try {
			State = 874;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				varOrTerm();
				State = 869;
				propertyListPathNotEmpty();
				}
				break;
			case OPAR:
			case OBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 871;
				triplesNodePath();
				State = 872;
				propertyListPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListPathNotEmptyContext propertyListPathNotEmpty() {
			return GetRuleContext<PropertyListPathNotEmptyContext>(0);
		}
		public PropertyListPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyListPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPropertyListPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPropertyListPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListPathContext propertyListPath() {
		PropertyListPathContext _localctx = new PropertyListPathContext(Context, State);
		EnterRule(_localctx, 162, RULE_propertyListPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 8072702435140829185L) != 0) || _la==VAR1 || _la==VAR2) {
				{
				State = 876;
				propertyListPathNotEmpty();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListPathNotEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectListPathContext objectListPath() {
			return GetRuleContext<ObjectListPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbPathContext[] verbPath() {
			return GetRuleContexts<VerbPathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbPathContext verbPath(int i) {
			return GetRuleContext<VerbPathContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbSimpleContext[] verbSimple() {
			return GetRuleContexts<VerbSimpleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbSimpleContext verbSimple(int i) {
			return GetRuleContext<VerbSimpleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(SPARQLParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(SPARQLParser.SCOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectListContext[] objectList() {
			return GetRuleContexts<ObjectListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectListContext objectList(int i) {
			return GetRuleContext<ObjectListContext>(i);
		}
		public PropertyListPathNotEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyListPathNotEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPropertyListPathNotEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPropertyListPathNotEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListPathNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListPathNotEmptyContext propertyListPathNotEmpty() {
		PropertyListPathNotEmptyContext _localctx = new PropertyListPathNotEmptyContext(Context, State);
		EnterRule(_localctx, 164, RULE_propertyListPathNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A_:
			case CARET:
			case OPAR:
			case EXCL:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				{
				State = 879;
				verbPath();
				}
				break;
			case VAR1:
			case VAR2:
				{
				State = 880;
				verbSimple();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 883;
			objectListPath();
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 884;
				Match(SCOL);
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 8072702435140829185L) != 0) || _la==VAR1 || _la==VAR2) {
					{
					State = 887;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case A_:
					case CARET:
					case OPAR:
					case EXCL:
					case IRIREF:
					case PNAME_NS:
					case PNAME_LN:
						{
						State = 885;
						verbPath();
						}
						break;
					case VAR1:
					case VAR2:
						{
						State = 886;
						verbSimple();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 889;
					objectList();
					}
				}

				}
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public VerbPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterVerbPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitVerbPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbPathContext verbPath() {
		VerbPathContext _localctx = new VerbPathContext(Context, State);
		EnterRule(_localctx, 166, RULE_verbPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbSimpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VerbSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbSimple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterVerbSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitVerbSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbSimpleContext verbSimple() {
		VerbSimpleContext _localctx = new VerbSimpleContext(Context, State);
		EnterRule(_localctx, 168, RULE_verbSimple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectPathContext[] objectPath() {
			return GetRuleContexts<ObjectPathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectPathContext objectPath(int i) {
			return GetRuleContext<ObjectPathContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		public ObjectListPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectListPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterObjectListPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitObjectListPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectListPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListPathContext objectListPath() {
		ObjectListPathContext _localctx = new ObjectListPathContext(Context, State);
		EnterRule(_localctx, 170, RULE_objectListPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			objectPath();
			State = 907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 903;
				Match(COMMA);
				State = 904;
				objectPath();
				}
				}
				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GraphNodePathContext graphNodePath() {
			return GetRuleContext<GraphNodePathContext>(0);
		}
		public ObjectPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterObjectPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitObjectPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPathContext objectPath() {
		ObjectPathContext _localctx = new ObjectPathContext(Context, State);
		EnterRule(_localctx, 172, RULE_objectPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			graphNodePath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathAlternativeContext pathAlternative() {
			return GetRuleContext<PathAlternativeContext>(0);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 174, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			pathAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathSequenceContext[] pathSequence() {
			return GetRuleContexts<PathSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathSequenceContext pathSequence(int i) {
			return GetRuleContext<PathSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(SPARQLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(SPARQLParser.PIPE, i);
		}
		public PathAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathAlternativeContext pathAlternative() {
		PathAlternativeContext _localctx = new PathAlternativeContext(Context, State);
		EnterRule(_localctx, 176, RULE_pathAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			pathSequence();
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 915;
				Match(PIPE);
				State = 916;
				pathSequence();
				}
				}
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathEltOrInverseContext[] pathEltOrInverse() {
			return GetRuleContexts<PathEltOrInverseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathEltOrInverseContext pathEltOrInverse(int i) {
			return GetRuleContext<PathEltOrInverseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(SPARQLParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(SPARQLParser.DIV, i);
		}
		public PathSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathSequenceContext pathSequence() {
		PathSequenceContext _localctx = new PathSequenceContext(Context, State);
		EnterRule(_localctx, 178, RULE_pathSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			pathEltOrInverse();
			State = 927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIV) {
				{
				{
				State = 923;
				Match(DIV);
				State = 924;
				pathEltOrInverse();
				}
				}
				State = 929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathEltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathPrimaryContext pathPrimary() {
			return GetRuleContext<PathPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathModContext pathMod() {
			return GetRuleContext<PathModContext>(0);
		}
		public PathEltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathElt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathElt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathElt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathElt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathEltContext pathElt() {
		PathEltContext _localctx = new PathEltContext(Context, State);
		EnterRule(_localctx, 180, RULE_pathElt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			pathPrimary();
			State = 932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 4101L) != 0)) {
				{
				State = 931;
				pathMod();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathEltOrInverseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathEltContext pathElt() {
			return GetRuleContext<PathEltContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(SPARQLParser.CARET, 0); }
		public PathEltOrInverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathEltOrInverse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathEltOrInverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathEltOrInverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathEltOrInverse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathEltOrInverseContext pathEltOrInverse() {
		PathEltOrInverseContext _localctx = new PathEltOrInverseContext(Context, State);
		EnterRule(_localctx, 182, RULE_pathEltOrInverse);
		try {
			State = 937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A_:
			case OPAR:
			case EXCL:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934;
				pathElt();
				}
				break;
			case CARET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 935;
				Match(CARET);
				State = 936;
				pathElt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(SPARQLParser.QMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SPARQLParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SPARQLParser.ADD, 0); }
		public PathModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathModContext pathMod() {
		PathModContext _localctx = new PathModContext(Context, State);
		EnterRule(_localctx, 184, RULE_pathMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 4101L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_() { return GetToken(SPARQLParser.A_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL() { return GetToken(SPARQLParser.EXCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathNegatedPropertySetContext pathNegatedPropertySet() {
			return GetRuleContext<PathNegatedPropertySetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		public PathPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathPrimaryContext pathPrimary() {
		PathPrimaryContext _localctx = new PathPrimaryContext(Context, State);
		EnterRule(_localctx, 186, RULE_pathPrimary);
		try {
			State = 949;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 941;
				iri();
				}
				break;
			case A_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 942;
				Match(A_);
				}
				break;
			case EXCL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 943;
				Match(EXCL);
				State = 944;
				pathNegatedPropertySet();
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 945;
				Match(OPAR);
				State = 946;
				path();
				State = 947;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNegatedPropertySetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathOneInPropertySetContext[] pathOneInPropertySet() {
			return GetRuleContexts<PathOneInPropertySetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathOneInPropertySetContext pathOneInPropertySet(int i) {
			return GetRuleContext<PathOneInPropertySetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(SPARQLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(SPARQLParser.PIPE, i);
		}
		public PathNegatedPropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathNegatedPropertySet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathNegatedPropertySet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathNegatedPropertySet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathNegatedPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNegatedPropertySetContext pathNegatedPropertySet() {
		PathNegatedPropertySetContext _localctx = new PathNegatedPropertySetContext(Context, State);
		EnterRule(_localctx, 188, RULE_pathNegatedPropertySet);
		int _la;
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A_:
			case CARET:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 951;
				pathOneInPropertySet();
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 952;
				Match(OPAR);
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 8070450566607667201L) != 0)) {
					{
					State = 953;
					pathOneInPropertySet();
					State = 958;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PIPE) {
						{
						{
						State = 954;
						Match(PIPE);
						State = 955;
						pathOneInPropertySet();
						}
						}
						State = 960;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 963;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathOneInPropertySetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_() { return GetToken(SPARQLParser.A_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(SPARQLParser.CARET, 0); }
		public PathOneInPropertySetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathOneInPropertySet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPathOneInPropertySet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPathOneInPropertySet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathOneInPropertySet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathOneInPropertySetContext pathOneInPropertySet() {
		PathOneInPropertySetContext _localctx = new PathOneInPropertySetContext(Context, State);
		EnterRule(_localctx, 190, RULE_pathOneInPropertySet);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 966;
				iri();
				}
				break;
			case A_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 967;
				Match(A_);
				}
				break;
			case CARET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 968;
				Match(CARET);
				State = 971;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IRIREF:
				case PNAME_NS:
				case PNAME_LN:
					{
					State = 969;
					iri();
					}
					break;
				case A_:
					{
					State = 970;
					Match(A_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public TriplesNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterTriplesNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitTriplesNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesNodeContext triplesNode() {
		TriplesNodeContext _localctx = new TriplesNodeContext(Context, State);
		EnterRule(_localctx, 192, RULE_triplesNode);
		try {
			State = 977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 975;
				collection();
				}
				break;
			case OBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 976;
				blankNodePropertyList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SPARQLParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SPARQLParser.CBRACK, 0); }
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blankNodePropertyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListContext blankNodePropertyList() {
		BlankNodePropertyListContext _localctx = new BlankNodePropertyListContext(Context, State);
		EnterRule(_localctx, 194, RULE_blankNodePropertyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			Match(OBRACK);
			State = 980;
			propertyListNotEmpty();
			State = 981;
			Match(CBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionPathContext collectionPath() {
			return GetRuleContext<CollectionPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlankNodePropertyListPathContext blankNodePropertyListPath() {
			return GetRuleContext<BlankNodePropertyListPathContext>(0);
		}
		public TriplesNodePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplesNodePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterTriplesNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitTriplesNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesNodePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesNodePathContext triplesNodePath() {
		TriplesNodePathContext _localctx = new TriplesNodePathContext(Context, State);
		EnterRule(_localctx, 196, RULE_triplesNodePath);
		try {
			State = 985;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983;
				collectionPath();
				}
				break;
			case OBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 984;
				blankNodePropertyListPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SPARQLParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListPathNotEmptyContext propertyListPathNotEmpty() {
			return GetRuleContext<PropertyListPathNotEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SPARQLParser.CBRACK, 0); }
		public BlankNodePropertyListPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blankNodePropertyListPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyListPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyListPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyListPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListPathContext blankNodePropertyListPath() {
		BlankNodePropertyListPathContext _localctx = new BlankNodePropertyListPathContext(Context, State);
		EnterRule(_localctx, 198, RULE_blankNodePropertyListPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			Match(OBRACK);
			State = 988;
			propertyListPathNotEmpty();
			State = 989;
			Match(CBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphNodeContext[] graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 200, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			Match(OPAR);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 992;
				graphNode();
				}
				}
				State = 995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0) );
			State = 997;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GraphNodePathContext[] graphNodePath() {
			return GetRuleContexts<GraphNodePathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphNodePathContext graphNodePath(int i) {
			return GetRuleContext<GraphNodePathContext>(i);
		}
		public CollectionPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterCollectionPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitCollectionPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionPathContext collectionPath() {
		CollectionPathContext _localctx = new CollectionPathContext(Context, State);
		EnterRule(_localctx, 202, RULE_collectionPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 999;
			Match(OPAR);
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1000;
				graphNodePath();
				}
				}
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TRUE || _la==FALSE || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 70367654707201L) != 0) );
			State = 1005;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public GraphNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodeContext graphNode() {
		GraphNodeContext _localctx = new GraphNodeContext(Context, State);
		EnterRule(_localctx, 204, RULE_graphNode);
		try {
			State = 1009;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1007;
				varOrTerm();
				}
				break;
			case OPAR:
			case OBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1008;
				triplesNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriplesNodePathContext triplesNodePath() {
			return GetRuleContext<TriplesNodePathContext>(0);
		}
		public GraphNodePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphNodePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNodePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodePathContext graphNodePath() {
		GraphNodePathContext _localctx = new GraphNodePathContext(Context, State);
		EnterRule(_localctx, 206, RULE_graphNodePath);
		try {
			State = 1013;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1011;
				varOrTerm();
				}
				break;
			case OPAR:
			case OBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1012;
				triplesNodePath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarOrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterVarOrTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitVarOrTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermContext varOrTerm() {
		VarOrTermContext _localctx = new VarOrTermContext(Context, State);
		EnterRule(_localctx, 208, RULE_varOrTerm);
		try {
			State = 1017;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1015;
				var();
				}
				break;
			case TRUE:
			case FALSE:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1016;
				graphTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrIriContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public VarOrIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrIri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterVarOrIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitVarOrIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrIriContext varOrIri() {
		VarOrIriContext _localctx = new VarOrIriContext(Context, State);
		EnterRule(_localctx, 210, RULE_varOrIri);
		try {
			State = 1021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1019;
				var();
				}
				break;
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1020;
				iri();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR1() { return GetToken(SPARQLParser.VAR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR2() { return GetToken(SPARQLParser.VAR2, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 212, RULE_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			_la = TokenStream.LA(1);
			if ( !(_la==VAR1 || _la==VAR2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RdfLiteralContext rdfLiteral() {
			return GetRuleContext<RdfLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlankNodeContext blankNode() {
			return GetRuleContext<BlankNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(SPARQLParser.NIL, 0); }
		public GraphTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterGraphTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitGraphTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphTermContext graphTerm() {
		GraphTermContext _localctx = new GraphTermContext(Context, State);
		EnterRule(_localctx, 214, RULE_graphTerm);
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1025;
				iri();
				}
				break;
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1026;
				rdfLiteral();
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1027;
				numericLiteral();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1028;
				booleanLiteral();
				}
				break;
			case BLANK_NODE_LABEL:
			case ANON:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1029;
				blankNode();
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1030;
				Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 216, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			conditionalOrExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(SPARQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(SPARQLParser.OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 218, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			conditionalAndExpression();
			State = 1040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1036;
				Match(OR);
				State = 1037;
				conditionalAndExpression();
				}
				}
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueLogicalContext[] valueLogical() {
			return GetRuleContexts<ValueLogicalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueLogicalContext valueLogical(int i) {
			return GetRuleContext<ValueLogicalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(SPARQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(SPARQLParser.AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043;
			valueLogical();
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 1044;
				Match(AND);
				State = 1045;
				valueLogical();
				}
				}
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueLogicalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ValueLogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueLogical; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterValueLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitValueLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueLogicalContext valueLogical() {
		ValueLogicalContext _localctx = new ValueLogicalContext(Context, State);
		EnterRule(_localctx, 222, RULE_valueLogical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			relationalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext[] numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SPARQLParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(SPARQLParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SPARQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SPARQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SPARQLParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SPARQLParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SPARQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SPARQLParser.NOT, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_relationalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			numericExpression();
			State = 1071;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQ:
				{
				State = 1054;
				Match(EQ);
				State = 1055;
				numericExpression();
				}
				break;
			case NEQ:
				{
				State = 1056;
				Match(NEQ);
				State = 1057;
				numericExpression();
				}
				break;
			case LT:
				{
				State = 1058;
				Match(LT);
				State = 1059;
				numericExpression();
				}
				break;
			case GT:
				{
				State = 1060;
				Match(GT);
				State = 1061;
				numericExpression();
				}
				break;
			case LTE:
				{
				State = 1062;
				Match(LTE);
				State = 1063;
				numericExpression();
				}
				break;
			case GTE:
				{
				State = 1064;
				Match(GTE);
				State = 1065;
				numericExpression();
				}
				break;
			case IN:
				{
				State = 1066;
				Match(IN);
				State = 1067;
				expressionList();
				}
				break;
			case NOT:
				{
				State = 1068;
				Match(NOT);
				State = 1069;
				Match(IN);
				State = 1070;
				expressionList();
				}
				break;
			case AS:
			case CPAR:
			case COMMA:
			case OR:
			case AND:
			case SCOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNumericExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNumericExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_numericExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			additiveExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(SPARQLParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(SPARQLParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB() { return GetTokens(SPARQLParser.SUB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB(int i) {
			return GetToken(SPARQLParser.SUB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralPositiveContext[] numericLiteralPositive() {
			return GetRuleContexts<NumericLiteralPositiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralPositiveContext numericLiteralPositive(int i) {
			return GetRuleContext<NumericLiteralPositiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralNegativeContext[] numericLiteralNegative() {
			return GetRuleContexts<NumericLiteralNegativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralNegativeContext numericLiteralNegative(int i) {
			return GetRuleContext<NumericLiteralNegativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(SPARQLParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(SPARQLParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(SPARQLParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(SPARQLParser.DIV, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			multiplicativeExpression();
			State = 1095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 528482307L) != 0)) {
				{
				State = 1093;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
					{
					State = 1076;
					Match(ADD);
					State = 1077;
					multiplicativeExpression();
					}
					break;
				case SUB:
					{
					State = 1078;
					Match(SUB);
					State = 1079;
					multiplicativeExpression();
					}
					break;
				case INTEGER_POSITIVE:
				case DECIMAL_POSITIVE:
				case DOUBLE_POSITIVE:
				case INTEGER_NEGATIVE:
				case DECIMAL_NEGATIVE:
				case DOUBLE_NEGATIVE:
					{
					State = 1082;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTEGER_POSITIVE:
					case DECIMAL_POSITIVE:
					case DOUBLE_POSITIVE:
						{
						State = 1080;
						numericLiteralPositive();
						}
						break;
					case INTEGER_NEGATIVE:
					case DECIMAL_NEGATIVE:
					case DOUBLE_NEGATIVE:
						{
						State = 1081;
						numericLiteralNegative();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1090;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MUL || _la==DIV) {
						{
						State = 1088;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case MUL:
							{
							{
							State = 1084;
							Match(MUL);
							State = 1085;
							unaryExpression();
							}
							}
							break;
						case DIV:
							{
							{
							State = 1086;
							Match(DIV);
							State = 1087;
							unaryExpression();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 1092;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(SPARQLParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(SPARQLParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(SPARQLParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(SPARQLParser.DIV, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 230, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			unaryExpression();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MUL || _la==DIV) {
				{
				State = 1103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MUL:
					{
					State = 1099;
					Match(MUL);
					State = 1100;
					unaryExpression();
					}
					break;
				case DIV:
					{
					State = 1101;
					Match(DIV);
					State = 1102;
					unaryExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL() { return GetToken(SPARQLParser.EXCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SPARQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SPARQLParser.SUB, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 232, RULE_unaryExpression);
		try {
			State = 1115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108;
				Match(EXCL);
				State = 1109;
				primaryExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1110;
				Match(ADD);
				State = 1111;
				primaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1112;
				Match(SUB);
				State = 1113;
				primaryExpression();
				}
				break;
			case TRUE:
			case FALSE:
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SameTerm:
			case IsIRI:
			case IsURI:
			case IsBLANK:
			case IsLITERAL:
			case IsNUMERIC:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
			case OPAR:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1114;
				primaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IriOrFunctionContext iriOrFunction() {
			return GetRuleContext<IriOrFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RdfLiteralContext rdfLiteral() {
			return GetRuleContext<RdfLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_primaryExpression);
		try {
			State = 1124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117;
				brackettedExpression();
				}
				break;
			case NOT:
			case STR:
			case LANG:
			case LANGMATCHES:
			case DATATYPE:
			case BOUND:
			case IRI:
			case URI:
			case BNODE:
			case RAND:
			case ABS:
			case CEIL:
			case FLOOR:
			case ROUND:
			case CONCAT:
			case STRLEN:
			case UCASE:
			case LCASE:
			case ENCODE_FOR_URI:
			case CONTAINS:
			case STRSTARTS:
			case STRENDS:
			case STRBEFORE:
			case STRAFTER:
			case YEAR:
			case MONTH:
			case DAY:
			case HOURS:
			case MINUTES:
			case SECONDS:
			case TIMEZONE:
			case TZ:
			case NOW:
			case UUID:
			case STRUUID:
			case MD5:
			case SHA1:
			case SHA256:
			case SHA384:
			case SHA512:
			case COALESCE:
			case IF:
			case STRLANG:
			case STRDT:
			case SameTerm:
			case IsIRI:
			case IsURI:
			case IsBLANK:
			case IsLITERAL:
			case IsNUMERIC:
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
			case REGEX:
			case SUBSTR:
			case REPLACE:
			case EXISTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1118;
				builtInCall();
				}
				break;
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119;
				iriOrFunction();
				}
				break;
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1120;
				rdfLiteral();
				}
				break;
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1121;
				numericLiteral();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1122;
				booleanLiteral();
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1123;
				var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrackettedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		public BrackettedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brackettedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBrackettedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBrackettedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackettedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrackettedExpressionContext brackettedExpression() {
		BrackettedExpressionContext _localctx = new BrackettedExpressionContext(Context, State);
		EnterRule(_localctx, 236, RULE_brackettedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			Match(OPAR);
			State = 1127;
			expression();
			State = 1128;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltInCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(SPARQLParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANG() { return GetToken(SPARQLParser.LANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGMATCHES() { return GetToken(SPARQLParser.LANGMATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATATYPE() { return GetToken(SPARQLParser.DATATYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOUND() { return GetToken(SPARQLParser.BOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRI() { return GetToken(SPARQLParser.IRI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URI() { return GetToken(SPARQLParser.URI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNODE() { return GetToken(SPARQLParser.BNODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(SPARQLParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(SPARQLParser.RAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(SPARQLParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(SPARQLParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(SPARQLParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(SPARQLParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(SPARQLParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstringExpressionContext substringExpression() {
			return GetRuleContext<SubstringExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRLEN() { return GetToken(SPARQLParser.STRLEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrReplaceExpressionContext strReplaceExpression() {
			return GetRuleContext<StrReplaceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCASE() { return GetToken(SPARQLParser.UCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCASE() { return GetToken(SPARQLParser.LCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODE_FOR_URI() { return GetToken(SPARQLParser.ENCODE_FOR_URI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(SPARQLParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRSTARTS() { return GetToken(SPARQLParser.STRSTARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRENDS() { return GetToken(SPARQLParser.STRENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRBEFORE() { return GetToken(SPARQLParser.STRBEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAFTER() { return GetToken(SPARQLParser.STRAFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(SPARQLParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(SPARQLParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(SPARQLParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURS() { return GetToken(SPARQLParser.HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(SPARQLParser.MINUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(SPARQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEZONE() { return GetToken(SPARQLParser.TIMEZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TZ() { return GetToken(SPARQLParser.TZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(SPARQLParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(SPARQLParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUUID() { return GetToken(SPARQLParser.STRUUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(SPARQLParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA1() { return GetToken(SPARQLParser.SHA1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA256() { return GetToken(SPARQLParser.SHA256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA384() { return GetToken(SPARQLParser.SHA384, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA512() { return GetToken(SPARQLParser.SHA512, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(SPARQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SPARQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRLANG() { return GetToken(SPARQLParser.STRLANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRDT() { return GetToken(SPARQLParser.STRDT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SameTerm() { return GetToken(SPARQLParser.SameTerm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsIRI() { return GetToken(SPARQLParser.IsIRI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsURI() { return GetToken(SPARQLParser.IsURI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsBLANK() { return GetToken(SPARQLParser.IsBLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsLITERAL() { return GetToken(SPARQLParser.IsLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsNUMERIC() { return GetToken(SPARQLParser.IsNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExpressionContext regexExpression() {
			return GetRuleContext<RegexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistsFuncContext existsFunc() {
			return GetRuleContext<ExistsFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExistsFuncContext notExistsFunc() {
			return GetRuleContext<NotExistsFuncContext>(0);
		}
		public BuiltInCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtInCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBuiltInCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBuiltInCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInCallContext builtInCall() {
		BuiltInCallContext _localctx = new BuiltInCallContext(Context, State);
		EnterRule(_localctx, 238, RULE_builtInCall);
		try {
			State = 1388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUNT:
			case SUM:
			case MIN:
			case MAX:
			case AVG:
			case SAMPLE:
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1130;
				aggregate();
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1131;
				Match(STR);
				State = 1132;
				Match(OPAR);
				State = 1133;
				expression();
				State = 1134;
				Match(CPAR);
				}
				break;
			case LANG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1136;
				Match(LANG);
				State = 1137;
				Match(OPAR);
				State = 1138;
				expression();
				State = 1139;
				Match(CPAR);
				}
				break;
			case LANGMATCHES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1141;
				Match(LANGMATCHES);
				State = 1142;
				Match(OPAR);
				State = 1143;
				expression();
				State = 1144;
				Match(COMMA);
				State = 1145;
				expression();
				State = 1146;
				Match(CPAR);
				}
				break;
			case DATATYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1148;
				Match(DATATYPE);
				State = 1149;
				Match(OPAR);
				State = 1150;
				expression();
				State = 1151;
				Match(CPAR);
				}
				break;
			case BOUND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1153;
				Match(BOUND);
				State = 1154;
				Match(OPAR);
				State = 1155;
				var();
				State = 1156;
				Match(CPAR);
				}
				break;
			case IRI:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1158;
				Match(IRI);
				State = 1159;
				Match(OPAR);
				State = 1160;
				expression();
				State = 1161;
				Match(CPAR);
				}
				break;
			case URI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1163;
				Match(URI);
				State = 1164;
				Match(OPAR);
				State = 1165;
				expression();
				State = 1166;
				Match(CPAR);
				}
				break;
			case BNODE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1168;
				Match(BNODE);
				State = 1174;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPAR:
					{
					State = 1169;
					Match(OPAR);
					State = 1170;
					expression();
					State = 1171;
					Match(CPAR);
					}
					break;
				case NIL:
					{
					State = 1173;
					Match(NIL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RAND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1176;
				Match(RAND);
				State = 1177;
				Match(NIL);
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1178;
				Match(ABS);
				State = 1179;
				Match(OPAR);
				State = 1180;
				expression();
				State = 1181;
				Match(CPAR);
				}
				break;
			case CEIL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1183;
				Match(CEIL);
				State = 1184;
				Match(OPAR);
				State = 1185;
				expression();
				State = 1186;
				Match(CPAR);
				}
				break;
			case FLOOR:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1188;
				Match(FLOOR);
				State = 1189;
				Match(OPAR);
				State = 1190;
				expression();
				State = 1191;
				Match(CPAR);
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1193;
				Match(ROUND);
				State = 1194;
				Match(OPAR);
				State = 1195;
				expression();
				State = 1196;
				Match(CPAR);
				}
				break;
			case CONCAT:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1198;
				Match(CONCAT);
				State = 1199;
				expressionList();
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1200;
				substringExpression();
				}
				break;
			case STRLEN:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1201;
				Match(STRLEN);
				State = 1202;
				Match(OPAR);
				State = 1203;
				expression();
				State = 1204;
				Match(CPAR);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1206;
				strReplaceExpression();
				}
				break;
			case UCASE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1207;
				Match(UCASE);
				State = 1208;
				Match(OPAR);
				State = 1209;
				expression();
				State = 1210;
				Match(CPAR);
				}
				break;
			case LCASE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1212;
				Match(LCASE);
				State = 1213;
				Match(OPAR);
				State = 1214;
				expression();
				State = 1215;
				Match(CPAR);
				}
				break;
			case ENCODE_FOR_URI:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1217;
				Match(ENCODE_FOR_URI);
				State = 1218;
				Match(OPAR);
				State = 1219;
				expression();
				State = 1220;
				Match(CPAR);
				}
				break;
			case CONTAINS:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1222;
				Match(CONTAINS);
				State = 1223;
				Match(OPAR);
				State = 1224;
				expression();
				State = 1225;
				Match(COMMA);
				State = 1226;
				expression();
				State = 1227;
				Match(CPAR);
				}
				break;
			case STRSTARTS:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1229;
				Match(STRSTARTS);
				State = 1230;
				Match(OPAR);
				State = 1231;
				expression();
				State = 1232;
				Match(COMMA);
				State = 1233;
				expression();
				State = 1234;
				Match(CPAR);
				}
				break;
			case STRENDS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1236;
				Match(STRENDS);
				State = 1237;
				Match(OPAR);
				State = 1238;
				expression();
				State = 1239;
				Match(COMMA);
				State = 1240;
				expression();
				State = 1241;
				Match(CPAR);
				}
				break;
			case STRBEFORE:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1243;
				Match(STRBEFORE);
				State = 1244;
				Match(OPAR);
				State = 1245;
				expression();
				State = 1246;
				Match(COMMA);
				State = 1247;
				expression();
				State = 1248;
				Match(CPAR);
				}
				break;
			case STRAFTER:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1250;
				Match(STRAFTER);
				State = 1251;
				Match(OPAR);
				State = 1252;
				expression();
				State = 1253;
				Match(COMMA);
				State = 1254;
				expression();
				State = 1255;
				Match(CPAR);
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1257;
				Match(YEAR);
				State = 1258;
				Match(OPAR);
				State = 1259;
				expression();
				State = 1260;
				Match(CPAR);
				}
				break;
			case MONTH:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1262;
				Match(MONTH);
				State = 1263;
				Match(OPAR);
				State = 1264;
				expression();
				State = 1265;
				Match(CPAR);
				}
				break;
			case DAY:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1267;
				Match(DAY);
				State = 1268;
				Match(OPAR);
				State = 1269;
				expression();
				State = 1270;
				Match(CPAR);
				}
				break;
			case HOURS:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1272;
				Match(HOURS);
				State = 1273;
				Match(OPAR);
				State = 1274;
				expression();
				State = 1275;
				Match(CPAR);
				}
				break;
			case MINUTES:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1277;
				Match(MINUTES);
				State = 1278;
				Match(OPAR);
				State = 1279;
				expression();
				State = 1280;
				Match(CPAR);
				}
				break;
			case SECONDS:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1282;
				Match(SECONDS);
				State = 1283;
				Match(OPAR);
				State = 1284;
				expression();
				State = 1285;
				Match(CPAR);
				}
				break;
			case TIMEZONE:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1287;
				Match(TIMEZONE);
				State = 1288;
				Match(OPAR);
				State = 1289;
				expression();
				State = 1290;
				Match(CPAR);
				}
				break;
			case TZ:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1292;
				Match(TZ);
				State = 1293;
				Match(OPAR);
				State = 1294;
				expression();
				State = 1295;
				Match(CPAR);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1297;
				Match(NOW);
				State = 1298;
				Match(NIL);
				}
				break;
			case UUID:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1299;
				Match(UUID);
				State = 1300;
				Match(NIL);
				}
				break;
			case STRUUID:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1301;
				Match(STRUUID);
				State = 1302;
				Match(NIL);
				}
				break;
			case MD5:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1303;
				Match(MD5);
				State = 1304;
				Match(OPAR);
				State = 1305;
				expression();
				State = 1306;
				Match(CPAR);
				}
				break;
			case SHA1:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1308;
				Match(SHA1);
				State = 1309;
				Match(OPAR);
				State = 1310;
				expression();
				State = 1311;
				Match(CPAR);
				}
				break;
			case SHA256:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1313;
				Match(SHA256);
				State = 1314;
				Match(OPAR);
				State = 1315;
				expression();
				State = 1316;
				Match(CPAR);
				}
				break;
			case SHA384:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1318;
				Match(SHA384);
				State = 1319;
				Match(OPAR);
				State = 1320;
				expression();
				State = 1321;
				Match(CPAR);
				}
				break;
			case SHA512:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1323;
				Match(SHA512);
				State = 1324;
				Match(OPAR);
				State = 1325;
				expression();
				State = 1326;
				Match(CPAR);
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1328;
				Match(COALESCE);
				State = 1329;
				expressionList();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1330;
				Match(IF);
				State = 1331;
				Match(OPAR);
				State = 1332;
				expression();
				State = 1333;
				Match(COMMA);
				State = 1334;
				expression();
				State = 1335;
				Match(COMMA);
				State = 1336;
				expression();
				State = 1337;
				Match(CPAR);
				}
				break;
			case STRLANG:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1339;
				Match(STRLANG);
				State = 1340;
				Match(OPAR);
				State = 1341;
				expression();
				State = 1342;
				Match(COMMA);
				State = 1343;
				expression();
				State = 1344;
				Match(CPAR);
				}
				break;
			case STRDT:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1346;
				Match(STRDT);
				State = 1347;
				Match(OPAR);
				State = 1348;
				expression();
				State = 1349;
				Match(COMMA);
				State = 1350;
				expression();
				State = 1351;
				Match(CPAR);
				}
				break;
			case SameTerm:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1353;
				Match(SameTerm);
				State = 1354;
				Match(OPAR);
				State = 1355;
				expression();
				State = 1356;
				Match(COMMA);
				State = 1357;
				expression();
				State = 1358;
				Match(CPAR);
				}
				break;
			case IsIRI:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1360;
				Match(IsIRI);
				State = 1361;
				Match(OPAR);
				State = 1362;
				expression();
				State = 1363;
				Match(CPAR);
				}
				break;
			case IsURI:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1365;
				Match(IsURI);
				State = 1366;
				Match(OPAR);
				State = 1367;
				expression();
				State = 1368;
				Match(CPAR);
				}
				break;
			case IsBLANK:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1370;
				Match(IsBLANK);
				State = 1371;
				Match(OPAR);
				State = 1372;
				expression();
				State = 1373;
				Match(CPAR);
				}
				break;
			case IsLITERAL:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1375;
				Match(IsLITERAL);
				State = 1376;
				Match(OPAR);
				State = 1377;
				expression();
				State = 1378;
				Match(CPAR);
				}
				break;
			case IsNUMERIC:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1380;
				Match(IsNUMERIC);
				State = 1381;
				Match(OPAR);
				State = 1382;
				expression();
				State = 1383;
				Match(CPAR);
				}
				break;
			case REGEX:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1385;
				regexExpression();
				}
				break;
			case EXISTS:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1386;
				existsFunc();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1387;
				notExistsFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEX() { return GetToken(SPARQLParser.REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		public RegexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterRegexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitRegexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExpressionContext regexExpression() {
		RegexExpressionContext _localctx = new RegexExpressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_regexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			Match(REGEX);
			State = 1391;
			Match(OPAR);
			State = 1392;
			expression();
			State = 1393;
			Match(COMMA);
			State = 1394;
			expression();
			State = 1397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1395;
				Match(COMMA);
				State = 1396;
				expression();
				}
			}

			State = 1399;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(SPARQLParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		public SubstringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterSubstringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitSubstringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstringExpressionContext substringExpression() {
		SubstringExpressionContext _localctx = new SubstringExpressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_substringExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			Match(SUBSTR);
			State = 1402;
			Match(OPAR);
			State = 1403;
			expression();
			State = 1404;
			Match(COMMA);
			State = 1405;
			expression();
			State = 1408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1406;
				Match(COMMA);
				State = 1407;
				expression();
				}
			}

			State = 1410;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrReplaceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SPARQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SPARQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SPARQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		public StrReplaceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strReplaceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterStrReplaceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitStrReplaceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrReplaceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrReplaceExpressionContext strReplaceExpression() {
		StrReplaceExpressionContext _localctx = new StrReplaceExpressionContext(Context, State);
		EnterRule(_localctx, 244, RULE_strReplaceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			Match(REPLACE);
			State = 1413;
			Match(OPAR);
			State = 1414;
			expression();
			State = 1415;
			Match(COMMA);
			State = 1416;
			expression();
			State = 1417;
			Match(COMMA);
			State = 1418;
			expression();
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1419;
				Match(COMMA);
				State = 1420;
				expression();
				}
			}

			State = 1423;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SPARQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public ExistsFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterExistsFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitExistsFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsFuncContext existsFunc() {
		ExistsFuncContext _localctx = new ExistsFuncContext(Context, State);
		EnterRule(_localctx, 246, RULE_existsFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			Match(EXISTS);
			State = 1426;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExistsFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SPARQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SPARQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public NotExistsFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExistsFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNotExistsFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNotExistsFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExistsFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExistsFuncContext notExistsFunc() {
		NotExistsFuncContext _localctx = new NotExistsFuncContext(Context, State);
		EnterRule(_localctx, 248, RULE_notExistsFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			Match(NOT);
			State = 1429;
			Match(EXISTS);
			State = 1430;
			groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(SPARQLParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(SPARQLParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(SPARQLParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(SPARQLParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SPARQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(SPARQLParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(SPARQLParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(SPARQLParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(SPARQLParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(SPARQLParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(SPARQLParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL() { return GetToken(SPARQLParser.SCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(SPARQLParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SPARQLParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 250, RULE_aggregate);
		int _la;
		try {
			State = 1496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUNT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1432;
				Match(COUNT);
				State = 1433;
				Match(OPAR);
				State = 1435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1434;
					Match(DISTINCT);
					}
				}

				State = 1439;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MUL:
					{
					State = 1437;
					Match(MUL);
					}
					break;
				case TRUE:
				case FALSE:
				case NOT:
				case STR:
				case LANG:
				case LANGMATCHES:
				case DATATYPE:
				case BOUND:
				case IRI:
				case URI:
				case BNODE:
				case RAND:
				case ABS:
				case CEIL:
				case FLOOR:
				case ROUND:
				case CONCAT:
				case STRLEN:
				case UCASE:
				case LCASE:
				case ENCODE_FOR_URI:
				case CONTAINS:
				case STRSTARTS:
				case STRENDS:
				case STRBEFORE:
				case STRAFTER:
				case YEAR:
				case MONTH:
				case DAY:
				case HOURS:
				case MINUTES:
				case SECONDS:
				case TIMEZONE:
				case TZ:
				case NOW:
				case UUID:
				case STRUUID:
				case MD5:
				case SHA1:
				case SHA256:
				case SHA384:
				case SHA512:
				case COALESCE:
				case IF:
				case STRLANG:
				case STRDT:
				case SameTerm:
				case IsIRI:
				case IsURI:
				case IsBLANK:
				case IsLITERAL:
				case IsNUMERIC:
				case COUNT:
				case SUM:
				case MIN:
				case MAX:
				case AVG:
				case SAMPLE:
				case GROUP_CONCAT:
				case REGEX:
				case SUBSTR:
				case REPLACE:
				case EXISTS:
				case OPAR:
				case ADD:
				case SUB:
				case EXCL:
				case IRIREF:
				case PNAME_NS:
				case PNAME_LN:
				case VAR1:
				case VAR2:
				case INTEGER:
				case DECIMAL:
				case DOUBLE:
				case INTEGER_POSITIVE:
				case DECIMAL_POSITIVE:
				case DOUBLE_POSITIVE:
				case INTEGER_NEGATIVE:
				case DECIMAL_NEGATIVE:
				case DOUBLE_NEGATIVE:
				case STRING_LITERAL1:
				case STRING_LITERAL2:
				case STRING_LITERAL_LONG1:
				case STRING_LITERAL_LONG2:
					{
					State = 1438;
					expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1441;
				Match(CPAR);
				}
				break;
			case SUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1442;
				Match(SUM);
				State = 1443;
				Match(OPAR);
				State = 1445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1444;
					Match(DISTINCT);
					}
				}

				State = 1447;
				expression();
				State = 1448;
				Match(CPAR);
				}
				break;
			case MIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1450;
				Match(MIN);
				State = 1451;
				Match(OPAR);
				State = 1453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1452;
					Match(DISTINCT);
					}
				}

				State = 1455;
				expression();
				State = 1456;
				Match(CPAR);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1458;
				Match(MAX);
				State = 1459;
				Match(OPAR);
				State = 1461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1460;
					Match(DISTINCT);
					}
				}

				State = 1463;
				expression();
				State = 1464;
				Match(CPAR);
				}
				break;
			case AVG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1466;
				Match(AVG);
				State = 1467;
				Match(OPAR);
				State = 1469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1468;
					Match(DISTINCT);
					}
				}

				State = 1471;
				expression();
				State = 1472;
				Match(CPAR);
				}
				break;
			case SAMPLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1474;
				Match(SAMPLE);
				State = 1475;
				Match(OPAR);
				State = 1477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1476;
					Match(DISTINCT);
					}
				}

				State = 1479;
				expression();
				State = 1480;
				Match(CPAR);
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1482;
				Match(GROUP_CONCAT);
				State = 1483;
				Match(OPAR);
				State = 1485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1484;
					Match(DISTINCT);
					}
				}

				State = 1487;
				expression();
				State = 1492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCOL) {
					{
					State = 1488;
					Match(SCOL);
					State = 1489;
					Match(SEPARATOR);
					State = 1490;
					Match(EQ);
					State = 1491;
					@string();
					}
				}

				State = 1494;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriOrFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IriOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iriOrFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterIriOrFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitIriOrFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIriOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriOrFunctionContext iriOrFunction() {
		IriOrFunctionContext _localctx = new IriOrFunctionContext(Context, State);
		EnterRule(_localctx, 252, RULE_iriOrFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			iri();
			State = 1500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR || _la==NIL) {
				{
				State = 1499;
				argList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RdfLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGTAG() { return GetToken(SPARQLParser.LANGTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET2() { return GetToken(SPARQLParser.CARET2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public RdfLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rdfLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterRdfLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitRdfLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRdfLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RdfLiteralContext rdfLiteral() {
		RdfLiteralContext _localctx = new RdfLiteralContext(Context, State);
		EnterRule(_localctx, 254, RULE_rdfLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502;
			@string();
			State = 1506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LANGTAG:
				{
				State = 1503;
				Match(LANGTAG);
				}
				break;
			case CARET2:
				{
				{
				State = 1504;
				Match(CARET2);
				State = 1505;
				iri();
				}
				}
				break;
			case TRUE:
			case FALSE:
			case NOT:
			case IN:
			case AS:
			case OPTIONAL:
			case GRAPH:
			case SERVICE:
			case BIND:
			case VALUES:
			case UNDEF:
			case A_:
			case MINUS:
			case FILTER:
			case CARET:
			case OPAR:
			case CPAR:
			case COMMA:
			case OR:
			case AND:
			case EQ:
			case NEQ:
			case GT:
			case LT:
			case GTE:
			case LTE:
			case ADD:
			case SUB:
			case MUL:
			case DIV:
			case EXCL:
			case SCOL:
			case OBRACE:
			case CBRACE:
			case DOT:
			case OBRACK:
			case CBRACK:
			case IRIREF:
			case PNAME_NS:
			case PNAME_LN:
			case BLANK_NODE_LABEL:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
			case STRING_LITERAL1:
			case STRING_LITERAL2:
			case STRING_LITERAL_LONG1:
			case STRING_LITERAL_LONG2:
			case NIL:
			case ANON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralUnsignedContext numericLiteralUnsigned() {
			return GetRuleContext<NumericLiteralUnsignedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralPositiveContext numericLiteralPositive() {
			return GetRuleContext<NumericLiteralPositiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralNegativeContext numericLiteralNegative() {
			return GetRuleContext<NumericLiteralNegativeContext>(0);
		}
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 256, RULE_numericLiteral);
		try {
			State = 1511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1508;
				numericLiteralUnsigned();
				}
				break;
			case INTEGER_POSITIVE:
			case DECIMAL_POSITIVE:
			case DOUBLE_POSITIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1509;
				numericLiteralPositive();
				}
				break;
			case INTEGER_NEGATIVE:
			case DECIMAL_NEGATIVE:
			case DOUBLE_NEGATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1510;
				numericLiteralNegative();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralUnsignedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SPARQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(SPARQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SPARQLParser.DOUBLE, 0); }
		public NumericLiteralUnsignedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteralUnsigned; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteralUnsigned(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteralUnsigned(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralUnsigned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralUnsignedContext numericLiteralUnsigned() {
		NumericLiteralUnsignedContext _localctx = new NumericLiteralUnsignedContext(Context, State);
		EnterRule(_localctx, 258, RULE_numericLiteralUnsigned);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralPositiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_POSITIVE() { return GetToken(SPARQLParser.INTEGER_POSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_POSITIVE() { return GetToken(SPARQLParser.DECIMAL_POSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_POSITIVE() { return GetToken(SPARQLParser.DOUBLE_POSITIVE, 0); }
		public NumericLiteralPositiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteralPositive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteralPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteralPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralPositive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralPositiveContext numericLiteralPositive() {
		NumericLiteralPositiveContext _localctx = new NumericLiteralPositiveContext(Context, State);
		EnterRule(_localctx, 260, RULE_numericLiteralPositive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralNegativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_NEGATIVE() { return GetToken(SPARQLParser.INTEGER_NEGATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NEGATIVE() { return GetToken(SPARQLParser.DECIMAL_NEGATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_NEGATIVE() { return GetToken(SPARQLParser.DOUBLE_NEGATIVE, 0); }
		public NumericLiteralNegativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteralNegative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteralNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteralNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralNegative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralNegativeContext numericLiteralNegative() {
		NumericLiteralNegativeContext _localctx = new NumericLiteralNegativeContext(Context, State);
		EnterRule(_localctx, 262, RULE_numericLiteralNegative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SPARQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SPARQLParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 264, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL1() { return GetToken(SPARQLParser.STRING_LITERAL1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL2() { return GetToken(SPARQLParser.STRING_LITERAL2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_LONG1() { return GetToken(SPARQLParser.STRING_LITERAL_LONG1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL_LONG2() { return GetToken(SPARQLParser.STRING_LITERAL_LONG2, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 266, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRIREF() { return GetToken(SPARQLParser.IRIREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrefixedNameContext prefixedName() {
			return GetRuleContext<PrefixedNameContext>(0);
		}
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 268, RULE_iri);
		try {
			State = 1525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IRIREF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1523;
				Match(IRIREF);
				}
				break;
			case PNAME_NS:
			case PNAME_LN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1524;
				prefixedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PNAME_LN() { return GetToken(SPARQLParser.PNAME_LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PNAME_NS() { return GetToken(SPARQLParser.PNAME_NS, 0); }
		public PrefixedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterPrefixedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitPrefixedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixedNameContext prefixedName() {
		PrefixedNameContext _localctx = new PrefixedNameContext(Context, State);
		EnterRule(_localctx, 270, RULE_prefixedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527;
			_la = TokenStream.LA(1);
			if ( !(_la==PNAME_NS || _la==PNAME_LN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_NODE_LABEL() { return GetToken(SPARQLParser.BLANK_NODE_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANON() { return GetToken(SPARQLParser.ANON, 0); }
		public BlankNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blankNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.EnterBlankNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPARQLParserListener typedListener = listener as ISPARQLParserListener;
			if (typedListener != null) typedListener.ExitBlankNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPARQLParserVisitor<TResult> typedVisitor = visitor as ISPARQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodeContext blankNode() {
		BlankNodeContext _localctx = new BlankNodeContext(Context, State);
		EnterRule(_localctx, 272, RULE_blankNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1529;
			_la = TokenStream.LA(1);
			if ( !(_la==BLANK_NODE_LABEL || _la==ANON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,162,1532,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,3,
		2,286,8,2,1,2,1,2,1,3,1,3,5,3,292,8,3,10,3,12,3,295,9,3,1,4,1,4,1,4,1,
		5,1,5,1,5,1,5,1,6,1,6,5,6,306,8,6,10,6,12,6,309,9,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,7,1,7,1,8,1,8,3,8,321,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,330,
		8,8,11,8,12,8,331,1,8,3,8,335,8,8,1,9,1,9,1,9,5,9,340,8,9,10,9,12,9,343,
		9,9,1,9,1,9,1,9,1,9,5,9,349,8,9,10,9,12,9,352,9,9,1,9,1,9,1,9,3,9,357,
		8,9,1,9,1,9,3,9,361,8,9,1,10,1,10,4,10,365,8,10,11,10,12,10,366,1,10,3,
		10,370,8,10,1,10,5,10,373,8,10,10,10,12,10,376,9,10,1,10,3,10,379,8,10,
		1,10,1,10,1,11,1,11,5,11,385,8,11,10,11,12,11,388,9,11,1,11,1,11,1,11,
		1,12,1,12,1,12,3,12,396,8,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,3,
		16,406,8,16,1,16,1,16,1,17,3,17,411,8,17,1,17,3,17,414,8,17,1,17,3,17,
		417,8,17,1,17,3,17,420,8,17,1,18,1,18,1,18,4,18,425,8,18,11,18,12,18,426,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,435,8,19,1,19,1,19,1,19,3,19,440,8,
		19,1,20,1,20,4,20,444,8,20,11,20,12,20,445,1,21,1,21,1,22,1,22,1,22,4,
		22,453,8,22,11,22,12,22,454,1,23,1,23,1,23,1,23,3,23,461,8,23,1,24,1,24,
		3,24,465,8,24,1,24,1,24,3,24,469,8,24,3,24,471,8,24,1,25,1,25,1,25,1,26,
		1,26,1,26,1,27,1,27,3,27,481,8,27,1,28,1,28,1,28,1,28,3,28,487,8,28,3,
		28,489,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
		502,8,29,1,30,1,30,3,30,506,8,30,1,30,1,30,1,30,3,30,511,8,30,1,31,1,31,
		3,31,515,8,31,1,31,1,31,1,32,1,32,3,32,521,8,32,1,32,1,32,1,33,1,33,3,
		33,527,8,33,1,33,1,33,1,34,1,34,3,34,533,8,34,1,34,1,34,1,34,1,34,1,35,
		1,35,3,35,541,8,35,1,35,1,35,1,35,1,35,1,36,1,36,3,36,549,8,36,1,36,1,
		36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
		39,1,40,1,40,3,40,569,8,40,1,40,1,40,3,40,573,8,40,1,40,3,40,576,8,40,
		1,40,5,40,579,8,40,10,40,12,40,582,9,40,1,40,1,40,1,40,1,41,1,41,1,41,
		1,42,1,42,1,42,1,43,1,43,1,43,1,43,3,43,597,8,43,1,44,1,44,3,44,601,8,
		44,1,44,3,44,604,8,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,3,46,613,8,46,
		1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,3,49,624,8,49,1,49,1,49,3,
		49,628,8,49,1,49,3,49,631,8,49,5,49,633,8,49,10,49,12,49,636,9,49,1,50,
		1,50,1,50,1,50,3,50,642,8,50,1,50,1,50,1,51,1,51,1,51,3,51,649,8,51,3,
		51,651,8,51,1,52,1,52,1,52,3,52,656,8,52,1,52,1,52,1,53,3,53,661,8,53,
		1,53,1,53,3,53,665,8,53,1,53,3,53,668,8,53,5,53,670,8,53,10,53,12,53,673,
		9,53,1,54,1,54,1,54,3,54,678,8,54,3,54,680,8,54,1,55,1,55,1,55,1,55,1,
		55,1,55,1,55,1,55,3,55,690,8,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,
		1,58,3,58,701,8,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
		60,1,60,1,60,1,61,1,61,3,61,718,8,61,1,62,1,62,1,62,5,62,723,8,62,10,62,
		12,62,726,9,62,1,62,1,62,1,63,1,63,1,63,5,63,733,8,63,10,63,12,63,736,
		9,63,1,63,3,63,739,8,63,1,63,1,63,1,63,5,63,744,8,63,10,63,12,63,747,9,
		63,1,63,1,63,5,63,751,8,63,10,63,12,63,754,9,63,1,63,1,63,1,64,1,64,1,
		64,1,64,1,64,3,64,763,8,64,1,65,1,65,1,65,1,66,1,66,1,66,5,66,771,8,66,
		10,66,12,66,774,9,66,1,67,1,67,1,67,1,68,1,68,1,68,3,68,782,8,68,1,69,
		1,69,1,69,1,70,1,70,1,70,3,70,790,8,70,1,70,1,70,1,70,5,70,795,8,70,10,
		70,12,70,798,9,70,1,70,1,70,3,70,802,8,70,1,71,1,71,1,71,1,71,1,71,5,71,
		809,8,71,10,71,12,71,812,9,71,1,71,1,71,3,71,816,8,71,1,72,1,72,3,72,820,
		8,72,1,72,1,72,1,73,1,73,1,73,3,73,827,8,73,3,73,829,8,73,1,74,1,74,1,
		74,1,74,1,74,1,74,3,74,837,8,74,1,75,3,75,840,8,75,1,76,1,76,1,76,1,76,
		1,76,1,76,3,76,848,8,76,5,76,850,8,76,10,76,12,76,853,9,76,1,77,1,77,3,
		77,857,8,77,1,78,1,78,1,78,5,78,862,8,78,10,78,12,78,865,9,78,1,79,1,79,
		1,80,1,80,1,80,1,80,1,80,1,80,3,80,875,8,80,1,81,3,81,878,8,81,1,82,1,
		82,3,82,882,8,82,1,82,1,82,1,82,1,82,3,82,888,8,82,1,82,1,82,3,82,892,
		8,82,5,82,894,8,82,10,82,12,82,897,9,82,1,83,1,83,1,84,1,84,1,85,1,85,
		1,85,5,85,906,8,85,10,85,12,85,909,9,85,1,86,1,86,1,87,1,87,1,88,1,88,
		1,88,5,88,918,8,88,10,88,12,88,921,9,88,1,89,1,89,1,89,5,89,926,8,89,10,
		89,12,89,929,9,89,1,90,1,90,3,90,933,8,90,1,91,1,91,1,91,3,91,938,8,91,
		1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,950,8,93,1,94,1,
		94,1,94,1,94,1,94,5,94,957,8,94,10,94,12,94,960,9,94,3,94,962,8,94,1,94,
		3,94,965,8,94,1,95,1,95,1,95,1,95,1,95,3,95,972,8,95,3,95,974,8,95,1,96,
		1,96,3,96,978,8,96,1,97,1,97,1,97,1,97,1,98,1,98,3,98,986,8,98,1,99,1,
		99,1,99,1,99,1,100,1,100,4,100,994,8,100,11,100,12,100,995,1,100,1,100,
		1,101,1,101,4,101,1002,8,101,11,101,12,101,1003,1,101,1,101,1,102,1,102,
		3,102,1010,8,102,1,103,1,103,3,103,1014,8,103,1,104,1,104,3,104,1018,8,
		104,1,105,1,105,3,105,1022,8,105,1,106,1,106,1,107,1,107,1,107,1,107,1,
		107,1,107,3,107,1032,8,107,1,108,1,108,1,109,1,109,1,109,5,109,1039,8,
		109,10,109,12,109,1042,9,109,1,110,1,110,1,110,5,110,1047,8,110,10,110,
		12,110,1050,9,110,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
		1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
		1072,8,112,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,
		1083,8,114,1,114,1,114,1,114,1,114,5,114,1089,8,114,10,114,12,114,1092,
		9,114,5,114,1094,8,114,10,114,12,114,1097,9,114,1,115,1,115,1,115,1,115,
		1,115,5,115,1104,8,115,10,115,12,115,1107,9,115,1,116,1,116,1,116,1,116,
		1,116,1,116,1,116,3,116,1116,8,116,1,117,1,117,1,117,1,117,1,117,1,117,
		1,117,3,117,1125,8,117,1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,3,119,1175,8,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,3,119,1389,8,119,1,120,1,120,1,120,1,120,1,120,1,120,
		1,120,3,120,1398,8,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,
		1,121,3,121,1409,8,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,
		1,122,1,122,1,122,3,122,1422,8,122,1,122,1,122,1,123,1,123,1,123,1,124,
		1,124,1,124,1,124,1,125,1,125,1,125,3,125,1436,8,125,1,125,1,125,3,125,
		1440,8,125,1,125,1,125,1,125,1,125,3,125,1446,8,125,1,125,1,125,1,125,
		1,125,1,125,1,125,3,125,1454,8,125,1,125,1,125,1,125,1,125,1,125,1,125,
		3,125,1462,8,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,1470,8,125,
		1,125,1,125,1,125,1,125,1,125,1,125,3,125,1478,8,125,1,125,1,125,1,125,
		1,125,1,125,1,125,3,125,1486,8,125,1,125,1,125,1,125,1,125,1,125,3,125,
		1493,8,125,1,125,1,125,3,125,1497,8,125,1,126,1,126,3,126,1501,8,126,1,
		127,1,127,1,127,1,127,3,127,1507,8,127,1,128,1,128,1,128,3,128,1512,8,
		128,1,129,1,129,1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,1,134,
		1,134,3,134,1526,8,134,1,135,1,135,1,136,1,136,1,136,0,0,137,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
		212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
		248,250,252,254,256,258,260,262,264,266,268,270,272,0,11,2,0,5,5,70,70,
		1,0,87,88,3,0,127,127,129,129,139,139,1,0,144,145,1,0,147,149,1,0,150,
		152,1,0,153,155,1,0,3,4,1,0,156,159,1,0,141,142,2,0,143,143,161,161,1651,
		0,274,1,0,0,0,2,277,1,0,0,0,4,280,1,0,0,0,6,293,1,0,0,0,8,296,1,0,0,0,
		10,299,1,0,0,0,12,303,1,0,0,0,14,313,1,0,0,0,16,318,1,0,0,0,18,336,1,0,
		0,0,20,362,1,0,0,0,22,382,1,0,0,0,24,392,1,0,0,0,26,397,1,0,0,0,28,399,
		1,0,0,0,30,402,1,0,0,0,32,405,1,0,0,0,34,410,1,0,0,0,36,421,1,0,0,0,38,
		439,1,0,0,0,40,441,1,0,0,0,42,447,1,0,0,0,44,449,1,0,0,0,46,460,1,0,0,
		0,48,470,1,0,0,0,50,472,1,0,0,0,52,475,1,0,0,0,54,480,1,0,0,0,56,482,1,
		0,0,0,58,501,1,0,0,0,60,503,1,0,0,0,62,512,1,0,0,0,64,518,1,0,0,0,66,524,
		1,0,0,0,68,530,1,0,0,0,70,538,1,0,0,0,72,546,1,0,0,0,74,554,1,0,0,0,76,
		558,1,0,0,0,78,562,1,0,0,0,80,568,1,0,0,0,82,586,1,0,0,0,84,589,1,0,0,
		0,86,592,1,0,0,0,88,603,1,0,0,0,90,605,1,0,0,0,92,612,1,0,0,0,94,614,1,
		0,0,0,96,618,1,0,0,0,98,623,1,0,0,0,100,637,1,0,0,0,102,645,1,0,0,0,104,
		652,1,0,0,0,106,660,1,0,0,0,108,674,1,0,0,0,110,689,1,0,0,0,112,691,1,
		0,0,0,114,694,1,0,0,0,116,698,1,0,0,0,118,705,1,0,0,0,120,712,1,0,0,0,
		122,717,1,0,0,0,124,719,1,0,0,0,126,738,1,0,0,0,128,762,1,0,0,0,130,764,
		1,0,0,0,132,767,1,0,0,0,134,775,1,0,0,0,136,781,1,0,0,0,138,783,1,0,0,
		0,140,801,1,0,0,0,142,815,1,0,0,0,144,817,1,0,0,0,146,823,1,0,0,0,148,
		836,1,0,0,0,150,839,1,0,0,0,152,841,1,0,0,0,154,856,1,0,0,0,156,858,1,
		0,0,0,158,866,1,0,0,0,160,874,1,0,0,0,162,877,1,0,0,0,164,881,1,0,0,0,
		166,898,1,0,0,0,168,900,1,0,0,0,170,902,1,0,0,0,172,910,1,0,0,0,174,912,
		1,0,0,0,176,914,1,0,0,0,178,922,1,0,0,0,180,930,1,0,0,0,182,937,1,0,0,
		0,184,939,1,0,0,0,186,949,1,0,0,0,188,964,1,0,0,0,190,973,1,0,0,0,192,
		977,1,0,0,0,194,979,1,0,0,0,196,985,1,0,0,0,198,987,1,0,0,0,200,991,1,
		0,0,0,202,999,1,0,0,0,204,1009,1,0,0,0,206,1013,1,0,0,0,208,1017,1,0,0,
		0,210,1021,1,0,0,0,212,1023,1,0,0,0,214,1031,1,0,0,0,216,1033,1,0,0,0,
		218,1035,1,0,0,0,220,1043,1,0,0,0,222,1051,1,0,0,0,224,1053,1,0,0,0,226,
		1073,1,0,0,0,228,1075,1,0,0,0,230,1098,1,0,0,0,232,1115,1,0,0,0,234,1124,
		1,0,0,0,236,1126,1,0,0,0,238,1388,1,0,0,0,240,1390,1,0,0,0,242,1401,1,
		0,0,0,244,1412,1,0,0,0,246,1425,1,0,0,0,248,1428,1,0,0,0,250,1496,1,0,
		0,0,252,1498,1,0,0,0,254,1502,1,0,0,0,256,1511,1,0,0,0,258,1513,1,0,0,
		0,260,1515,1,0,0,0,262,1517,1,0,0,0,264,1519,1,0,0,0,266,1521,1,0,0,0,
		268,1525,1,0,0,0,270,1527,1,0,0,0,272,1529,1,0,0,0,274,275,3,4,2,0,275,
		276,5,0,0,1,276,1,1,0,0,0,277,278,3,56,28,0,278,279,5,0,0,1,279,3,1,0,
		0,0,280,285,3,6,3,0,281,286,3,12,6,0,282,286,3,18,9,0,283,286,3,20,10,
		0,284,286,3,22,11,0,285,281,1,0,0,0,285,282,1,0,0,0,285,283,1,0,0,0,285,
		284,1,0,0,0,286,287,1,0,0,0,287,288,3,54,27,0,288,5,1,0,0,0,289,292,3,
		8,4,0,290,292,3,10,5,0,291,289,1,0,0,0,291,290,1,0,0,0,292,295,1,0,0,0,
		293,291,1,0,0,0,293,294,1,0,0,0,294,7,1,0,0,0,295,293,1,0,0,0,296,297,
		5,108,0,0,297,298,5,140,0,0,298,9,1,0,0,0,299,300,5,109,0,0,300,301,5,
		141,0,0,301,302,5,140,0,0,302,11,1,0,0,0,303,307,3,16,8,0,304,306,3,24,
		12,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,
		310,1,0,0,0,309,307,1,0,0,0,310,311,3,32,16,0,311,312,3,34,17,0,312,13,
		1,0,0,0,313,314,3,16,8,0,314,315,3,32,16,0,315,316,3,34,17,0,316,317,3,
		54,27,0,317,15,1,0,0,0,318,320,5,69,0,0,319,321,7,0,0,0,320,319,1,0,0,
		0,320,321,1,0,0,0,321,334,1,0,0,0,322,330,3,212,106,0,323,324,5,116,0,
		0,324,325,3,216,108,0,325,326,5,71,0,0,326,327,3,212,106,0,327,328,5,117,
		0,0,328,330,1,0,0,0,329,322,1,0,0,0,329,323,1,0,0,0,330,331,1,0,0,0,331,
		329,1,0,0,0,331,332,1,0,0,0,332,335,1,0,0,0,333,335,5,129,0,0,334,329,
		1,0,0,0,334,333,1,0,0,0,335,17,1,0,0,0,336,360,5,110,0,0,337,341,3,144,
		72,0,338,340,3,24,12,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,
		341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,3,32,16,0,345,
		346,3,34,17,0,346,361,1,0,0,0,347,349,3,24,12,0,348,347,1,0,0,0,349,352,
		1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,
		0,353,354,5,72,0,0,354,356,5,133,0,0,355,357,3,102,51,0,356,355,1,0,0,
		0,356,357,1,0,0,0,357,358,1,0,0,0,358,359,5,134,0,0,359,361,3,34,17,0,
		360,337,1,0,0,0,360,350,1,0,0,0,361,19,1,0,0,0,362,369,5,112,0,0,363,365,
		3,210,105,0,364,363,1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,367,1,
		0,0,0,367,370,1,0,0,0,368,370,5,129,0,0,369,364,1,0,0,0,369,368,1,0,0,
		0,370,374,1,0,0,0,371,373,3,24,12,0,372,371,1,0,0,0,373,376,1,0,0,0,374,
		372,1,0,0,0,374,375,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,377,379,3,
		32,16,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,3,34,17,
		0,381,21,1,0,0,0,382,386,5,113,0,0,383,385,3,24,12,0,384,383,1,0,0,0,385,
		388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,386,1,
		0,0,0,389,390,3,32,16,0,390,391,3,34,17,0,391,23,1,0,0,0,392,395,5,111,
		0,0,393,396,3,26,13,0,394,396,3,28,14,0,395,393,1,0,0,0,395,394,1,0,0,
		0,396,25,1,0,0,0,397,398,3,30,15,0,398,27,1,0,0,0,399,400,5,93,0,0,400,
		401,3,30,15,0,401,29,1,0,0,0,402,403,3,268,134,0,403,31,1,0,0,0,404,406,
		5,72,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,408,3,104,
		52,0,408,33,1,0,0,0,409,411,3,36,18,0,410,409,1,0,0,0,410,411,1,0,0,0,
		411,413,1,0,0,0,412,414,3,40,20,0,413,412,1,0,0,0,413,414,1,0,0,0,414,
		416,1,0,0,0,415,417,3,44,22,0,416,415,1,0,0,0,416,417,1,0,0,0,417,419,
		1,0,0,0,418,420,3,48,24,0,419,418,1,0,0,0,419,420,1,0,0,0,420,35,1,0,0,
		0,421,422,5,84,0,0,422,424,5,85,0,0,423,425,3,38,19,0,424,423,1,0,0,0,
		425,426,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,37,1,0,0,0,428,440,
		3,238,119,0,429,440,3,138,69,0,430,431,5,116,0,0,431,434,3,216,108,0,432,
		433,5,71,0,0,433,435,3,212,106,0,434,432,1,0,0,0,434,435,1,0,0,0,435,436,
		1,0,0,0,436,437,5,117,0,0,437,440,1,0,0,0,438,440,3,212,106,0,439,428,
		1,0,0,0,439,429,1,0,0,0,439,430,1,0,0,0,439,438,1,0,0,0,440,39,1,0,0,0,
		441,443,5,86,0,0,442,444,3,42,21,0,443,442,1,0,0,0,444,445,1,0,0,0,445,
		443,1,0,0,0,445,446,1,0,0,0,446,41,1,0,0,0,447,448,3,136,68,0,448,43,1,
		0,0,0,449,450,5,91,0,0,450,452,5,85,0,0,451,453,3,46,23,0,452,451,1,0,
		0,0,453,454,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,45,1,0,0,0,456,
		457,7,1,0,0,457,461,3,236,118,0,458,461,3,136,68,0,459,461,3,212,106,0,
		460,456,1,0,0,0,460,458,1,0,0,0,460,459,1,0,0,0,461,47,1,0,0,0,462,464,
		3,50,25,0,463,465,3,52,26,0,464,463,1,0,0,0,464,465,1,0,0,0,465,471,1,
		0,0,0,466,468,3,52,26,0,467,469,3,50,25,0,468,467,1,0,0,0,468,469,1,0,
		0,0,469,471,1,0,0,0,470,462,1,0,0,0,470,466,1,0,0,0,471,49,1,0,0,0,472,
		473,5,89,0,0,473,474,5,147,0,0,474,51,1,0,0,0,475,476,5,90,0,0,476,477,
		5,147,0,0,477,53,1,0,0,0,478,479,5,78,0,0,479,481,3,122,61,0,480,478,1,
		0,0,0,480,481,1,0,0,0,481,55,1,0,0,0,482,488,3,6,3,0,483,486,3,58,29,0,
		484,485,5,132,0,0,485,487,3,56,28,0,486,484,1,0,0,0,486,487,1,0,0,0,487,
		489,1,0,0,0,488,483,1,0,0,0,488,489,1,0,0,0,489,57,1,0,0,0,490,502,3,60,
		30,0,491,502,3,62,31,0,492,502,3,64,32,0,493,502,3,68,34,0,494,502,3,70,
		35,0,495,502,3,72,36,0,496,502,3,66,33,0,497,502,3,74,37,0,498,502,3,76,
		38,0,499,502,3,78,39,0,500,502,3,80,40,0,501,490,1,0,0,0,501,491,1,0,0,
		0,501,492,1,0,0,0,501,493,1,0,0,0,501,494,1,0,0,0,501,495,1,0,0,0,501,
		496,1,0,0,0,501,497,1,0,0,0,501,498,1,0,0,0,501,499,1,0,0,0,501,500,1,
		0,0,0,502,59,1,0,0,0,503,505,5,104,0,0,504,506,5,76,0,0,505,504,1,0,0,
		0,505,506,1,0,0,0,506,507,1,0,0,0,507,510,3,268,134,0,508,509,5,105,0,
		0,509,511,3,90,45,0,510,508,1,0,0,0,510,511,1,0,0,0,511,61,1,0,0,0,512,
		514,5,106,0,0,513,515,5,76,0,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,
		1,0,0,0,516,517,3,92,46,0,517,63,1,0,0,0,518,520,5,107,0,0,519,521,5,76,
		0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,3,92,46,0,
		523,65,1,0,0,0,524,526,5,103,0,0,525,527,5,76,0,0,526,525,1,0,0,0,526,
		527,1,0,0,0,527,528,1,0,0,0,528,529,3,90,45,0,529,67,1,0,0,0,530,532,5,
		127,0,0,531,533,5,76,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,
		0,534,535,3,88,44,0,535,536,5,101,0,0,536,537,3,88,44,0,537,69,1,0,0,0,
		538,540,5,102,0,0,539,541,5,76,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,
		542,1,0,0,0,542,543,3,88,44,0,543,544,5,101,0,0,544,545,3,88,44,0,545,
		71,1,0,0,0,546,548,5,100,0,0,547,549,5,76,0,0,548,547,1,0,0,0,548,549,
		1,0,0,0,549,550,1,0,0,0,550,551,3,88,44,0,551,552,5,101,0,0,552,553,3,
		88,44,0,553,73,1,0,0,0,554,555,5,96,0,0,555,556,5,99,0,0,556,557,3,96,
		48,0,557,75,1,0,0,0,558,559,5,97,0,0,559,560,5,99,0,0,560,561,3,96,48,
		0,561,77,1,0,0,0,562,563,5,97,0,0,563,564,5,72,0,0,564,565,3,94,47,0,565,
		79,1,0,0,0,566,567,5,98,0,0,567,569,3,268,134,0,568,566,1,0,0,0,568,569,
		1,0,0,0,569,575,1,0,0,0,570,572,3,82,41,0,571,573,3,84,42,0,572,571,1,
		0,0,0,572,573,1,0,0,0,573,576,1,0,0,0,574,576,3,84,42,0,575,570,1,0,0,
		0,575,574,1,0,0,0,576,580,1,0,0,0,577,579,3,86,43,0,578,577,1,0,0,0,579,
		582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,580,1,
		0,0,0,583,584,5,72,0,0,584,585,3,104,52,0,585,81,1,0,0,0,586,587,5,97,
		0,0,587,588,3,94,47,0,588,83,1,0,0,0,589,590,5,96,0,0,590,591,3,94,47,
		0,591,85,1,0,0,0,592,596,5,95,0,0,593,597,3,268,134,0,594,595,5,93,0,0,
		595,597,3,268,134,0,596,593,1,0,0,0,596,594,1,0,0,0,597,87,1,0,0,0,598,
		604,5,92,0,0,599,601,5,74,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,
		1,0,0,0,602,604,3,268,134,0,603,598,1,0,0,0,603,600,1,0,0,0,604,89,1,0,
		0,0,605,606,5,74,0,0,606,607,3,268,134,0,607,91,1,0,0,0,608,613,3,90,45,
		0,609,613,5,92,0,0,610,613,5,93,0,0,611,613,5,94,0,0,612,608,1,0,0,0,612,
		609,1,0,0,0,612,610,1,0,0,0,612,611,1,0,0,0,613,93,1,0,0,0,614,615,5,133,
		0,0,615,616,3,98,49,0,616,617,5,134,0,0,617,95,1,0,0,0,618,619,5,133,0,
		0,619,620,3,98,49,0,620,621,5,134,0,0,621,97,1,0,0,0,622,624,3,102,51,
		0,623,622,1,0,0,0,623,624,1,0,0,0,624,634,1,0,0,0,625,627,3,100,50,0,626,
		628,5,135,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,631,
		3,102,51,0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,625,1,0,
		0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,99,1,0,0,0,636,
		634,1,0,0,0,637,638,5,74,0,0,638,639,3,210,105,0,639,641,5,133,0,0,640,
		642,3,102,51,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,
		5,134,0,0,644,101,1,0,0,0,645,650,3,148,74,0,646,648,5,135,0,0,647,649,
		3,102,51,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,646,1,0,
		0,0,650,651,1,0,0,0,651,103,1,0,0,0,652,655,5,133,0,0,653,656,3,14,7,0,
		654,656,3,106,53,0,655,653,1,0,0,0,655,654,1,0,0,0,656,657,1,0,0,0,657,
		658,5,134,0,0,658,105,1,0,0,0,659,661,3,108,54,0,660,659,1,0,0,0,660,661,
		1,0,0,0,661,671,1,0,0,0,662,664,3,110,55,0,663,665,5,135,0,0,664,663,1,
		0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,668,3,108,54,0,667,666,1,0,0,
		0,667,668,1,0,0,0,668,670,1,0,0,0,669,662,1,0,0,0,670,673,1,0,0,0,671,
		669,1,0,0,0,671,672,1,0,0,0,672,107,1,0,0,0,673,671,1,0,0,0,674,679,3,
		160,80,0,675,677,5,135,0,0,676,678,3,108,54,0,677,676,1,0,0,0,677,678,
		1,0,0,0,678,680,1,0,0,0,679,675,1,0,0,0,679,680,1,0,0,0,680,109,1,0,0,
		0,681,690,3,132,66,0,682,690,3,112,56,0,683,690,3,130,65,0,684,690,3,114,
		57,0,685,690,3,116,58,0,686,690,3,134,67,0,687,690,3,118,59,0,688,690,
		3,120,60,0,689,681,1,0,0,0,689,682,1,0,0,0,689,683,1,0,0,0,689,684,1,0,
		0,0,689,685,1,0,0,0,689,686,1,0,0,0,689,687,1,0,0,0,689,688,1,0,0,0,690,
		111,1,0,0,0,691,692,5,73,0,0,692,693,3,104,52,0,693,113,1,0,0,0,694,695,
		5,74,0,0,695,696,3,210,105,0,696,697,3,104,52,0,697,115,1,0,0,0,698,700,
		5,75,0,0,699,701,5,76,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,
		0,0,702,703,3,210,105,0,703,704,3,104,52,0,704,117,1,0,0,0,705,706,5,77,
		0,0,706,707,5,116,0,0,707,708,3,216,108,0,708,709,5,71,0,0,709,710,3,212,
		106,0,710,711,5,117,0,0,711,119,1,0,0,0,712,713,5,78,0,0,713,714,3,122,
		61,0,714,121,1,0,0,0,715,718,3,124,62,0,716,718,3,126,63,0,717,715,1,0,
		0,0,717,716,1,0,0,0,718,123,1,0,0,0,719,720,3,212,106,0,720,724,5,133,
		0,0,721,723,3,128,64,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,
		724,725,1,0,0,0,725,727,1,0,0,0,726,724,1,0,0,0,727,728,5,134,0,0,728,
		125,1,0,0,0,729,739,5,160,0,0,730,734,5,116,0,0,731,733,3,212,106,0,732,
		731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,737,1,
		0,0,0,736,734,1,0,0,0,737,739,5,117,0,0,738,729,1,0,0,0,738,730,1,0,0,
		0,739,740,1,0,0,0,740,752,5,133,0,0,741,745,5,116,0,0,742,744,3,128,64,
		0,743,742,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,
		748,1,0,0,0,747,745,1,0,0,0,748,751,5,117,0,0,749,751,5,160,0,0,750,741,
		1,0,0,0,750,749,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,
		0,753,755,1,0,0,0,754,752,1,0,0,0,755,756,5,134,0,0,756,127,1,0,0,0,757,
		763,3,268,134,0,758,763,3,254,127,0,759,763,3,256,128,0,760,763,3,264,
		132,0,761,763,5,79,0,0,762,757,1,0,0,0,762,758,1,0,0,0,762,759,1,0,0,0,
		762,760,1,0,0,0,762,761,1,0,0,0,763,129,1,0,0,0,764,765,5,82,0,0,765,766,
		3,104,52,0,766,131,1,0,0,0,767,772,3,104,52,0,768,769,5,81,0,0,769,771,
		3,104,52,0,770,768,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,
		0,0,773,133,1,0,0,0,774,772,1,0,0,0,775,776,5,83,0,0,776,777,3,136,68,
		0,777,135,1,0,0,0,778,782,3,236,118,0,779,782,3,238,119,0,780,782,3,138,
		69,0,781,778,1,0,0,0,781,779,1,0,0,0,781,780,1,0,0,0,782,137,1,0,0,0,783,
		784,3,268,134,0,784,785,3,140,70,0,785,139,1,0,0,0,786,802,5,160,0,0,787,
		789,5,116,0,0,788,790,5,5,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,
		1,0,0,0,791,796,3,216,108,0,792,793,5,118,0,0,793,795,3,216,108,0,794,
		792,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,799,1,
		0,0,0,798,796,1,0,0,0,799,800,5,117,0,0,800,802,1,0,0,0,801,786,1,0,0,
		0,801,787,1,0,0,0,802,141,1,0,0,0,803,816,5,160,0,0,804,805,5,116,0,0,
		805,810,3,216,108,0,806,807,5,118,0,0,807,809,3,216,108,0,808,806,1,0,
		0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,
		810,1,0,0,0,813,814,5,117,0,0,814,816,1,0,0,0,815,803,1,0,0,0,815,804,
		1,0,0,0,816,143,1,0,0,0,817,819,5,133,0,0,818,820,3,146,73,0,819,818,1,
		0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,134,0,0,822,145,1,0,0,
		0,823,828,3,148,74,0,824,826,5,135,0,0,825,827,3,146,73,0,826,825,1,0,
		0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,824,1,0,0,0,828,829,1,0,0,0,829,
		147,1,0,0,0,830,831,3,208,104,0,831,832,3,152,76,0,832,837,1,0,0,0,833,
		834,3,192,96,0,834,835,3,150,75,0,835,837,1,0,0,0,836,830,1,0,0,0,836,
		833,1,0,0,0,837,149,1,0,0,0,838,840,3,152,76,0,839,838,1,0,0,0,839,840,
		1,0,0,0,840,151,1,0,0,0,841,842,3,154,77,0,842,851,3,156,78,0,843,847,
		5,132,0,0,844,845,3,154,77,0,845,846,3,156,78,0,846,848,1,0,0,0,847,844,
		1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,843,1,0,0,0,850,853,1,0,0,
		0,851,849,1,0,0,0,851,852,1,0,0,0,852,153,1,0,0,0,853,851,1,0,0,0,854,
		857,3,210,105,0,855,857,5,80,0,0,856,854,1,0,0,0,856,855,1,0,0,0,857,155,
		1,0,0,0,858,863,3,158,79,0,859,860,5,118,0,0,860,862,3,158,79,0,861,859,
		1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,157,1,0,0,
		0,865,863,1,0,0,0,866,867,3,204,102,0,867,159,1,0,0,0,868,869,3,208,104,
		0,869,870,3,164,82,0,870,875,1,0,0,0,871,872,3,196,98,0,872,873,3,162,
		81,0,873,875,1,0,0,0,874,868,1,0,0,0,874,871,1,0,0,0,875,161,1,0,0,0,876,
		878,3,164,82,0,877,876,1,0,0,0,877,878,1,0,0,0,878,163,1,0,0,0,879,882,
		3,166,83,0,880,882,3,168,84,0,881,879,1,0,0,0,881,880,1,0,0,0,882,883,
		1,0,0,0,883,895,3,170,85,0,884,891,5,132,0,0,885,888,3,166,83,0,886,888,
		3,168,84,0,887,885,1,0,0,0,887,886,1,0,0,0,888,889,1,0,0,0,889,890,3,156,
		78,0,890,892,1,0,0,0,891,887,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,
		884,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,165,1,
		0,0,0,897,895,1,0,0,0,898,899,3,174,87,0,899,167,1,0,0,0,900,901,3,212,
		106,0,901,169,1,0,0,0,902,907,3,172,86,0,903,904,5,118,0,0,904,906,3,172,
		86,0,905,903,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,
		171,1,0,0,0,909,907,1,0,0,0,910,911,3,206,103,0,911,173,1,0,0,0,912,913,
		3,176,88,0,913,175,1,0,0,0,914,919,3,178,89,0,915,916,5,138,0,0,916,918,
		3,178,89,0,917,915,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,
		0,0,920,177,1,0,0,0,921,919,1,0,0,0,922,927,3,182,91,0,923,924,5,130,0,
		0,924,926,3,182,91,0,925,923,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,
		928,1,0,0,0,928,179,1,0,0,0,929,927,1,0,0,0,930,932,3,186,93,0,931,933,
		3,184,92,0,932,931,1,0,0,0,932,933,1,0,0,0,933,181,1,0,0,0,934,938,3,180,
		90,0,935,936,5,115,0,0,936,938,3,180,90,0,937,934,1,0,0,0,937,935,1,0,
		0,0,938,183,1,0,0,0,939,940,7,2,0,0,940,185,1,0,0,0,941,950,3,268,134,
		0,942,950,5,80,0,0,943,944,5,131,0,0,944,950,3,188,94,0,945,946,5,116,
		0,0,946,947,3,174,87,0,947,948,5,117,0,0,948,950,1,0,0,0,949,941,1,0,0,
		0,949,942,1,0,0,0,949,943,1,0,0,0,949,945,1,0,0,0,950,187,1,0,0,0,951,
		965,3,190,95,0,952,961,5,116,0,0,953,958,3,190,95,0,954,955,5,138,0,0,
		955,957,3,190,95,0,956,954,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,
		959,1,0,0,0,959,962,1,0,0,0,960,958,1,0,0,0,961,953,1,0,0,0,961,962,1,
		0,0,0,962,963,1,0,0,0,963,965,5,117,0,0,964,951,1,0,0,0,964,952,1,0,0,
		0,965,189,1,0,0,0,966,974,3,268,134,0,967,974,5,80,0,0,968,971,5,115,0,
		0,969,972,3,268,134,0,970,972,5,80,0,0,971,969,1,0,0,0,971,970,1,0,0,0,
		972,974,1,0,0,0,973,966,1,0,0,0,973,967,1,0,0,0,973,968,1,0,0,0,974,191,
		1,0,0,0,975,978,3,200,100,0,976,978,3,194,97,0,977,975,1,0,0,0,977,976,
		1,0,0,0,978,193,1,0,0,0,979,980,5,136,0,0,980,981,3,152,76,0,981,982,5,
		137,0,0,982,195,1,0,0,0,983,986,3,202,101,0,984,986,3,198,99,0,985,983,
		1,0,0,0,985,984,1,0,0,0,986,197,1,0,0,0,987,988,5,136,0,0,988,989,3,164,
		82,0,989,990,5,137,0,0,990,199,1,0,0,0,991,993,5,116,0,0,992,994,3,204,
		102,0,993,992,1,0,0,0,994,995,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,
		996,997,1,0,0,0,997,998,5,117,0,0,998,201,1,0,0,0,999,1001,5,116,0,0,1000,
		1002,3,206,103,0,1001,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1001,1,0,0,0,
		1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1006,5,117,0,0,1006,203,1,0,0,
		0,1007,1010,3,208,104,0,1008,1010,3,192,96,0,1009,1007,1,0,0,0,1009,1008,
		1,0,0,0,1010,205,1,0,0,0,1011,1014,3,208,104,0,1012,1014,3,196,98,0,1013,
		1011,1,0,0,0,1013,1012,1,0,0,0,1014,207,1,0,0,0,1015,1018,3,212,106,0,
		1016,1018,3,214,107,0,1017,1015,1,0,0,0,1017,1016,1,0,0,0,1018,209,1,0,
		0,0,1019,1022,3,212,106,0,1020,1022,3,268,134,0,1021,1019,1,0,0,0,1021,
		1020,1,0,0,0,1022,211,1,0,0,0,1023,1024,7,3,0,0,1024,213,1,0,0,0,1025,
		1032,3,268,134,0,1026,1032,3,254,127,0,1027,1032,3,256,128,0,1028,1032,
		3,264,132,0,1029,1032,3,272,136,0,1030,1032,5,160,0,0,1031,1025,1,0,0,
		0,1031,1026,1,0,0,0,1031,1027,1,0,0,0,1031,1028,1,0,0,0,1031,1029,1,0,
		0,0,1031,1030,1,0,0,0,1032,215,1,0,0,0,1033,1034,3,218,109,0,1034,217,
		1,0,0,0,1035,1040,3,220,110,0,1036,1037,5,119,0,0,1037,1039,3,220,110,
		0,1038,1036,1,0,0,0,1039,1042,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,
		0,0,1041,219,1,0,0,0,1042,1040,1,0,0,0,1043,1048,3,222,111,0,1044,1045,
		5,120,0,0,1045,1047,3,222,111,0,1046,1044,1,0,0,0,1047,1050,1,0,0,0,1048,
		1046,1,0,0,0,1048,1049,1,0,0,0,1049,221,1,0,0,0,1050,1048,1,0,0,0,1051,
		1052,3,224,112,0,1052,223,1,0,0,0,1053,1071,3,226,113,0,1054,1055,5,121,
		0,0,1055,1072,3,226,113,0,1056,1057,5,122,0,0,1057,1072,3,226,113,0,1058,
		1059,5,124,0,0,1059,1072,3,226,113,0,1060,1061,5,123,0,0,1061,1072,3,226,
		113,0,1062,1063,5,126,0,0,1063,1072,3,226,113,0,1064,1065,5,125,0,0,1065,
		1072,3,226,113,0,1066,1067,5,7,0,0,1067,1072,3,142,71,0,1068,1069,5,6,
		0,0,1069,1070,5,7,0,0,1070,1072,3,142,71,0,1071,1054,1,0,0,0,1071,1056,
		1,0,0,0,1071,1058,1,0,0,0,1071,1060,1,0,0,0,1071,1062,1,0,0,0,1071,1064,
		1,0,0,0,1071,1066,1,0,0,0,1071,1068,1,0,0,0,1071,1072,1,0,0,0,1072,225,
		1,0,0,0,1073,1074,3,228,114,0,1074,227,1,0,0,0,1075,1095,3,230,115,0,1076,
		1077,5,127,0,0,1077,1094,3,230,115,0,1078,1079,5,128,0,0,1079,1094,3,230,
		115,0,1080,1083,3,260,130,0,1081,1083,3,262,131,0,1082,1080,1,0,0,0,1082,
		1081,1,0,0,0,1083,1090,1,0,0,0,1084,1085,5,129,0,0,1085,1089,3,232,116,
		0,1086,1087,5,130,0,0,1087,1089,3,232,116,0,1088,1084,1,0,0,0,1088,1086,
		1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1094,
		1,0,0,0,1092,1090,1,0,0,0,1093,1076,1,0,0,0,1093,1078,1,0,0,0,1093,1082,
		1,0,0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,229,
		1,0,0,0,1097,1095,1,0,0,0,1098,1105,3,232,116,0,1099,1100,5,129,0,0,1100,
		1104,3,232,116,0,1101,1102,5,130,0,0,1102,1104,3,232,116,0,1103,1099,1,
		0,0,0,1103,1101,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,
		1,0,0,0,1106,231,1,0,0,0,1107,1105,1,0,0,0,1108,1109,5,131,0,0,1109,1116,
		3,234,117,0,1110,1111,5,127,0,0,1111,1116,3,234,117,0,1112,1113,5,128,
		0,0,1113,1116,3,234,117,0,1114,1116,3,234,117,0,1115,1108,1,0,0,0,1115,
		1110,1,0,0,0,1115,1112,1,0,0,0,1115,1114,1,0,0,0,1116,233,1,0,0,0,1117,
		1125,3,236,118,0,1118,1125,3,238,119,0,1119,1125,3,252,126,0,1120,1125,
		3,254,127,0,1121,1125,3,256,128,0,1122,1125,3,264,132,0,1123,1125,3,212,
		106,0,1124,1117,1,0,0,0,1124,1118,1,0,0,0,1124,1119,1,0,0,0,1124,1120,
		1,0,0,0,1124,1121,1,0,0,0,1124,1122,1,0,0,0,1124,1123,1,0,0,0,1125,235,
		1,0,0,0,1126,1127,5,116,0,0,1127,1128,3,216,108,0,1128,1129,5,117,0,0,
		1129,237,1,0,0,0,1130,1389,3,250,125,0,1131,1132,5,8,0,0,1132,1133,5,116,
		0,0,1133,1134,3,216,108,0,1134,1135,5,117,0,0,1135,1389,1,0,0,0,1136,1137,
		5,9,0,0,1137,1138,5,116,0,0,1138,1139,3,216,108,0,1139,1140,5,117,0,0,
		1140,1389,1,0,0,0,1141,1142,5,10,0,0,1142,1143,5,116,0,0,1143,1144,3,216,
		108,0,1144,1145,5,118,0,0,1145,1146,3,216,108,0,1146,1147,5,117,0,0,1147,
		1389,1,0,0,0,1148,1149,5,11,0,0,1149,1150,5,116,0,0,1150,1151,3,216,108,
		0,1151,1152,5,117,0,0,1152,1389,1,0,0,0,1153,1154,5,12,0,0,1154,1155,5,
		116,0,0,1155,1156,3,212,106,0,1156,1157,5,117,0,0,1157,1389,1,0,0,0,1158,
		1159,5,13,0,0,1159,1160,5,116,0,0,1160,1161,3,216,108,0,1161,1162,5,117,
		0,0,1162,1389,1,0,0,0,1163,1164,5,14,0,0,1164,1165,5,116,0,0,1165,1166,
		3,216,108,0,1166,1167,5,117,0,0,1167,1389,1,0,0,0,1168,1174,5,15,0,0,1169,
		1170,5,116,0,0,1170,1171,3,216,108,0,1171,1172,5,117,0,0,1172,1175,1,0,
		0,0,1173,1175,5,160,0,0,1174,1169,1,0,0,0,1174,1173,1,0,0,0,1175,1389,
		1,0,0,0,1176,1177,5,16,0,0,1177,1389,5,160,0,0,1178,1179,5,17,0,0,1179,
		1180,5,116,0,0,1180,1181,3,216,108,0,1181,1182,5,117,0,0,1182,1389,1,0,
		0,0,1183,1184,5,18,0,0,1184,1185,5,116,0,0,1185,1186,3,216,108,0,1186,
		1187,5,117,0,0,1187,1389,1,0,0,0,1188,1189,5,19,0,0,1189,1190,5,116,0,
		0,1190,1191,3,216,108,0,1191,1192,5,117,0,0,1192,1389,1,0,0,0,1193,1194,
		5,20,0,0,1194,1195,5,116,0,0,1195,1196,3,216,108,0,1196,1197,5,117,0,0,
		1197,1389,1,0,0,0,1198,1199,5,21,0,0,1199,1389,3,142,71,0,1200,1389,3,
		242,121,0,1201,1202,5,22,0,0,1202,1203,5,116,0,0,1203,1204,3,216,108,0,
		1204,1205,5,117,0,0,1205,1389,1,0,0,0,1206,1389,3,244,122,0,1207,1208,
		5,23,0,0,1208,1209,5,116,0,0,1209,1210,3,216,108,0,1210,1211,5,117,0,0,
		1211,1389,1,0,0,0,1212,1213,5,24,0,0,1213,1214,5,116,0,0,1214,1215,3,216,
		108,0,1215,1216,5,117,0,0,1216,1389,1,0,0,0,1217,1218,5,25,0,0,1218,1219,
		5,116,0,0,1219,1220,3,216,108,0,1220,1221,5,117,0,0,1221,1389,1,0,0,0,
		1222,1223,5,26,0,0,1223,1224,5,116,0,0,1224,1225,3,216,108,0,1225,1226,
		5,118,0,0,1226,1227,3,216,108,0,1227,1228,5,117,0,0,1228,1389,1,0,0,0,
		1229,1230,5,27,0,0,1230,1231,5,116,0,0,1231,1232,3,216,108,0,1232,1233,
		5,118,0,0,1233,1234,3,216,108,0,1234,1235,5,117,0,0,1235,1389,1,0,0,0,
		1236,1237,5,28,0,0,1237,1238,5,116,0,0,1238,1239,3,216,108,0,1239,1240,
		5,118,0,0,1240,1241,3,216,108,0,1241,1242,5,117,0,0,1242,1389,1,0,0,0,
		1243,1244,5,29,0,0,1244,1245,5,116,0,0,1245,1246,3,216,108,0,1246,1247,
		5,118,0,0,1247,1248,3,216,108,0,1248,1249,5,117,0,0,1249,1389,1,0,0,0,
		1250,1251,5,30,0,0,1251,1252,5,116,0,0,1252,1253,3,216,108,0,1253,1254,
		5,118,0,0,1254,1255,3,216,108,0,1255,1256,5,117,0,0,1256,1389,1,0,0,0,
		1257,1258,5,31,0,0,1258,1259,5,116,0,0,1259,1260,3,216,108,0,1260,1261,
		5,117,0,0,1261,1389,1,0,0,0,1262,1263,5,32,0,0,1263,1264,5,116,0,0,1264,
		1265,3,216,108,0,1265,1266,5,117,0,0,1266,1389,1,0,0,0,1267,1268,5,33,
		0,0,1268,1269,5,116,0,0,1269,1270,3,216,108,0,1270,1271,5,117,0,0,1271,
		1389,1,0,0,0,1272,1273,5,34,0,0,1273,1274,5,116,0,0,1274,1275,3,216,108,
		0,1275,1276,5,117,0,0,1276,1389,1,0,0,0,1277,1278,5,35,0,0,1278,1279,5,
		116,0,0,1279,1280,3,216,108,0,1280,1281,5,117,0,0,1281,1389,1,0,0,0,1282,
		1283,5,36,0,0,1283,1284,5,116,0,0,1284,1285,3,216,108,0,1285,1286,5,117,
		0,0,1286,1389,1,0,0,0,1287,1288,5,37,0,0,1288,1289,5,116,0,0,1289,1290,
		3,216,108,0,1290,1291,5,117,0,0,1291,1389,1,0,0,0,1292,1293,5,38,0,0,1293,
		1294,5,116,0,0,1294,1295,3,216,108,0,1295,1296,5,117,0,0,1296,1389,1,0,
		0,0,1297,1298,5,39,0,0,1298,1389,5,160,0,0,1299,1300,5,40,0,0,1300,1389,
		5,160,0,0,1301,1302,5,41,0,0,1302,1389,5,160,0,0,1303,1304,5,42,0,0,1304,
		1305,5,116,0,0,1305,1306,3,216,108,0,1306,1307,5,117,0,0,1307,1389,1,0,
		0,0,1308,1309,5,43,0,0,1309,1310,5,116,0,0,1310,1311,3,216,108,0,1311,
		1312,5,117,0,0,1312,1389,1,0,0,0,1313,1314,5,44,0,0,1314,1315,5,116,0,
		0,1315,1316,3,216,108,0,1316,1317,5,117,0,0,1317,1389,1,0,0,0,1318,1319,
		5,45,0,0,1319,1320,5,116,0,0,1320,1321,3,216,108,0,1321,1322,5,117,0,0,
		1322,1389,1,0,0,0,1323,1324,5,46,0,0,1324,1325,5,116,0,0,1325,1326,3,216,
		108,0,1326,1327,5,117,0,0,1327,1389,1,0,0,0,1328,1329,5,47,0,0,1329,1389,
		3,142,71,0,1330,1331,5,48,0,0,1331,1332,5,116,0,0,1332,1333,3,216,108,
		0,1333,1334,5,118,0,0,1334,1335,3,216,108,0,1335,1336,5,118,0,0,1336,1337,
		3,216,108,0,1337,1338,5,117,0,0,1338,1389,1,0,0,0,1339,1340,5,49,0,0,1340,
		1341,5,116,0,0,1341,1342,3,216,108,0,1342,1343,5,118,0,0,1343,1344,3,216,
		108,0,1344,1345,5,117,0,0,1345,1389,1,0,0,0,1346,1347,5,50,0,0,1347,1348,
		5,116,0,0,1348,1349,3,216,108,0,1349,1350,5,118,0,0,1350,1351,3,216,108,
		0,1351,1352,5,117,0,0,1352,1389,1,0,0,0,1353,1354,5,51,0,0,1354,1355,5,
		116,0,0,1355,1356,3,216,108,0,1356,1357,5,118,0,0,1357,1358,3,216,108,
		0,1358,1359,5,117,0,0,1359,1389,1,0,0,0,1360,1361,5,52,0,0,1361,1362,5,
		116,0,0,1362,1363,3,216,108,0,1363,1364,5,117,0,0,1364,1389,1,0,0,0,1365,
		1366,5,53,0,0,1366,1367,5,116,0,0,1367,1368,3,216,108,0,1368,1369,5,117,
		0,0,1369,1389,1,0,0,0,1370,1371,5,54,0,0,1371,1372,5,116,0,0,1372,1373,
		3,216,108,0,1373,1374,5,117,0,0,1374,1389,1,0,0,0,1375,1376,5,55,0,0,1376,
		1377,5,116,0,0,1377,1378,3,216,108,0,1378,1379,5,117,0,0,1379,1389,1,0,
		0,0,1380,1381,5,56,0,0,1381,1382,5,116,0,0,1382,1383,3,216,108,0,1383,
		1384,5,117,0,0,1384,1389,1,0,0,0,1385,1389,3,240,120,0,1386,1389,3,246,
		123,0,1387,1389,3,248,124,0,1388,1130,1,0,0,0,1388,1131,1,0,0,0,1388,1136,
		1,0,0,0,1388,1141,1,0,0,0,1388,1148,1,0,0,0,1388,1153,1,0,0,0,1388,1158,
		1,0,0,0,1388,1163,1,0,0,0,1388,1168,1,0,0,0,1388,1176,1,0,0,0,1388,1178,
		1,0,0,0,1388,1183,1,0,0,0,1388,1188,1,0,0,0,1388,1193,1,0,0,0,1388,1198,
		1,0,0,0,1388,1200,1,0,0,0,1388,1201,1,0,0,0,1388,1206,1,0,0,0,1388,1207,
		1,0,0,0,1388,1212,1,0,0,0,1388,1217,1,0,0,0,1388,1222,1,0,0,0,1388,1229,
		1,0,0,0,1388,1236,1,0,0,0,1388,1243,1,0,0,0,1388,1250,1,0,0,0,1388,1257,
		1,0,0,0,1388,1262,1,0,0,0,1388,1267,1,0,0,0,1388,1272,1,0,0,0,1388,1277,
		1,0,0,0,1388,1282,1,0,0,0,1388,1287,1,0,0,0,1388,1292,1,0,0,0,1388,1297,
		1,0,0,0,1388,1299,1,0,0,0,1388,1301,1,0,0,0,1388,1303,1,0,0,0,1388,1308,
		1,0,0,0,1388,1313,1,0,0,0,1388,1318,1,0,0,0,1388,1323,1,0,0,0,1388,1328,
		1,0,0,0,1388,1330,1,0,0,0,1388,1339,1,0,0,0,1388,1346,1,0,0,0,1388,1353,
		1,0,0,0,1388,1360,1,0,0,0,1388,1365,1,0,0,0,1388,1370,1,0,0,0,1388,1375,
		1,0,0,0,1388,1380,1,0,0,0,1388,1385,1,0,0,0,1388,1386,1,0,0,0,1388,1387,
		1,0,0,0,1389,239,1,0,0,0,1390,1391,5,65,0,0,1391,1392,5,116,0,0,1392,1393,
		3,216,108,0,1393,1394,5,118,0,0,1394,1397,3,216,108,0,1395,1396,5,118,
		0,0,1396,1398,3,216,108,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1399,
		1,0,0,0,1399,1400,5,117,0,0,1400,241,1,0,0,0,1401,1402,5,66,0,0,1402,1403,
		5,116,0,0,1403,1404,3,216,108,0,1404,1405,5,118,0,0,1405,1408,3,216,108,
		0,1406,1407,5,118,0,0,1407,1409,3,216,108,0,1408,1406,1,0,0,0,1408,1409,
		1,0,0,0,1409,1410,1,0,0,0,1410,1411,5,117,0,0,1411,243,1,0,0,0,1412,1413,
		5,67,0,0,1413,1414,5,116,0,0,1414,1415,3,216,108,0,1415,1416,5,118,0,0,
		1416,1417,3,216,108,0,1417,1418,5,118,0,0,1418,1421,3,216,108,0,1419,1420,
		5,118,0,0,1420,1422,3,216,108,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,
		1423,1,0,0,0,1423,1424,5,117,0,0,1424,245,1,0,0,0,1425,1426,5,68,0,0,1426,
		1427,3,104,52,0,1427,247,1,0,0,0,1428,1429,5,6,0,0,1429,1430,5,68,0,0,
		1430,1431,3,104,52,0,1431,249,1,0,0,0,1432,1433,5,57,0,0,1433,1435,5,116,
		0,0,1434,1436,5,5,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1439,1,
		0,0,0,1437,1440,5,129,0,0,1438,1440,3,216,108,0,1439,1437,1,0,0,0,1439,
		1438,1,0,0,0,1440,1441,1,0,0,0,1441,1497,5,117,0,0,1442,1443,5,58,0,0,
		1443,1445,5,116,0,0,1444,1446,5,5,0,0,1445,1444,1,0,0,0,1445,1446,1,0,
		0,0,1446,1447,1,0,0,0,1447,1448,3,216,108,0,1448,1449,5,117,0,0,1449,1497,
		1,0,0,0,1450,1451,5,59,0,0,1451,1453,5,116,0,0,1452,1454,5,5,0,0,1453,
		1452,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,0,0,1455,1456,3,216,108,0,
		1456,1457,5,117,0,0,1457,1497,1,0,0,0,1458,1459,5,60,0,0,1459,1461,5,116,
		0,0,1460,1462,5,5,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,
		0,0,0,1463,1464,3,216,108,0,1464,1465,5,117,0,0,1465,1497,1,0,0,0,1466,
		1467,5,61,0,0,1467,1469,5,116,0,0,1468,1470,5,5,0,0,1469,1468,1,0,0,0,
		1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1472,3,216,108,0,1472,1473,5,
		117,0,0,1473,1497,1,0,0,0,1474,1475,5,62,0,0,1475,1477,5,116,0,0,1476,
		1478,5,5,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,
		1480,3,216,108,0,1480,1481,5,117,0,0,1481,1497,1,0,0,0,1482,1483,5,63,
		0,0,1483,1485,5,116,0,0,1484,1486,5,5,0,0,1485,1484,1,0,0,0,1485,1486,
		1,0,0,0,1486,1487,1,0,0,0,1487,1492,3,216,108,0,1488,1489,5,132,0,0,1489,
		1490,5,64,0,0,1490,1491,5,121,0,0,1491,1493,3,266,133,0,1492,1488,1,0,
		0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1495,5,117,0,0,1495,1497,
		1,0,0,0,1496,1432,1,0,0,0,1496,1442,1,0,0,0,1496,1450,1,0,0,0,1496,1458,
		1,0,0,0,1496,1466,1,0,0,0,1496,1474,1,0,0,0,1496,1482,1,0,0,0,1497,251,
		1,0,0,0,1498,1500,3,268,134,0,1499,1501,3,140,70,0,1500,1499,1,0,0,0,1500,
		1501,1,0,0,0,1501,253,1,0,0,0,1502,1506,3,266,133,0,1503,1507,5,146,0,
		0,1504,1505,5,114,0,0,1505,1507,3,268,134,0,1506,1503,1,0,0,0,1506,1504,
		1,0,0,0,1506,1507,1,0,0,0,1507,255,1,0,0,0,1508,1512,3,258,129,0,1509,
		1512,3,260,130,0,1510,1512,3,262,131,0,1511,1508,1,0,0,0,1511,1509,1,0,
		0,0,1511,1510,1,0,0,0,1512,257,1,0,0,0,1513,1514,7,4,0,0,1514,259,1,0,
		0,0,1515,1516,7,5,0,0,1516,261,1,0,0,0,1517,1518,7,6,0,0,1518,263,1,0,
		0,0,1519,1520,7,7,0,0,1520,265,1,0,0,0,1521,1522,7,8,0,0,1522,267,1,0,
		0,0,1523,1526,5,140,0,0,1524,1526,3,270,135,0,1525,1523,1,0,0,0,1525,1524,
		1,0,0,0,1526,269,1,0,0,0,1527,1528,7,9,0,0,1528,271,1,0,0,0,1529,1530,
		7,10,0,0,1530,273,1,0,0,0,149,285,291,293,307,320,329,331,334,341,350,
		356,360,366,369,374,378,386,395,405,410,413,416,419,426,434,439,445,454,
		460,464,468,470,480,486,488,501,505,510,514,520,526,532,540,548,568,572,
		575,580,596,600,603,612,623,627,630,634,641,648,650,655,660,664,667,671,
		677,679,689,700,717,724,734,738,745,750,752,762,772,781,789,796,801,810,
		815,819,826,828,836,839,847,851,856,863,874,877,881,887,891,895,907,919,
		927,932,937,949,958,961,964,971,973,977,985,995,1003,1009,1013,1017,1021,
		1031,1040,1048,1071,1082,1088,1090,1093,1095,1103,1105,1115,1124,1174,
		1388,1397,1408,1421,1435,1439,1445,1453,1461,1469,1477,1485,1492,1496,
		1500,1506,1511,1525
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BigO.SPARQLParser.Parser
